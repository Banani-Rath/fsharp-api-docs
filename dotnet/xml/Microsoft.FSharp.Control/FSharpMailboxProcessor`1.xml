<Type Name="FSharpMailboxProcessor&lt;TMsg&gt;" FullName="Microsoft.FSharp.Control.FSharpMailboxProcessor&lt;TMsg&gt;">
  <TypeSignature Language="C#" Value="public sealed class FSharpMailboxProcessor&lt;TMsg&gt; : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FSharpMailboxProcessor`1&lt;TMsg&gt; extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.FSharp.Control.FSharpMailboxProcessor`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class FSharpMailboxProcessor(Of TMsg)&#xA;Implements IDisposable" />
  <TypeSignature Language="F#" Value="type MailboxProcessor&lt;'Msg&gt; = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>FSharp.Core</AssemblyName>
    <AssemblyVersion>4.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TMsg" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.AutoSerializable(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.ObjectType)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.CompiledName("FSharpMailboxProcessor`1")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.Sealed</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TMsg">To be added.</typeparam>
    <summary>A message-processing agent which executes an asynchronous computation.</summary>
    <remarks>The agent encapsulates a message queue that supports multiple-writers and 
 a single reader agent. Writers send messages to the agent by using the Post 
 method and its variations.

 The agent may wait for messages using the Receive or TryReceive methods or
 scan through all available messages using the Scan or TryScan method.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FSharpMailboxProcessor (Microsoft.FSharp.Core.FSharpFunc&lt;Microsoft.FSharp.Control.FSharpMailboxProcessor&lt;TMsg&gt;,Microsoft.FSharp.Control.FSharpAsync&lt;Microsoft.FSharp.Core.Unit&gt;&gt; body, Microsoft.FSharp.Core.FSharpOption&lt;System.Threading.CancellationToken&gt; cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class Microsoft.FSharp.Core.FSharpFunc`2&lt;class Microsoft.FSharp.Control.FSharpMailboxProcessor`1&lt;!TMsg&gt;, class Microsoft.FSharp.Control.FSharpAsync`1&lt;class Microsoft.FSharp.Core.Unit&gt;&gt; body, class Microsoft.FSharp.Core.FSharpOption`1&lt;valuetype System.Threading.CancellationToken&gt; cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.#ctor(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Control.FSharpMailboxProcessor{`0},Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (body As FSharpFunc(Of FSharpMailboxProcessor(Of TMsg), FSharpAsync(Of Unit)), cancellationToken As FSharpOption(Of CancellationToken))" />
      <MemberSignature Language="F#" Value="new MailboxProcessor&lt;'Msg&gt; : (MailboxProcessor&lt;'Msg&gt; -&gt; Async&lt;unit&gt;) * option&lt;System.Threading.CancellationToken&gt; -&gt; MailboxProcessor&lt;'Msg&gt;" Usage="new Microsoft.FSharp.Control.MailboxProcessor&lt;'Msg&gt; (body, cancellationToken)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="body" Type="Microsoft.FSharp.Core.FSharpFunc&lt;Microsoft.FSharp.Control.FSharpMailboxProcessor&lt;TMsg&gt;,Microsoft.FSharp.Control.FSharpAsync&lt;Microsoft.FSharp.Core.Unit&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Threading.CancellationToken&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.FSharp.Core.OptionalArgument</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">The function to produce an asynchronous computation that will be executed
 as the read loop for the MailboxProcessor when Start is called.</param>
        <param name="cancellationToken">An optional cancellation token for the <c>body</c>.
 Defaults to <c>Async.DefaultCancellationToken</c>.</param>
        <summary>Creates an agent. The <c>body</c> function is used to generate the asynchronous 
 computation executed by the agent. This function is not executed until 
 <c>Start</c> is called.</summary>
        <returns>The created MailboxProcessor.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentQueueLength">
      <MemberSignature Language="C#" Value="public int CurrentQueueLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentQueueLength" />
      <MemberSignature Language="DocId" Value="P:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.CurrentQueueLength" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentQueueLength As Integer" />
      <MemberSignature Language="F#" Value="member this.CurrentQueueLength : int" Usage="Microsoft.FSharp.Control.MailboxProcessor&lt;'Msg&gt;.CurrentQueueLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the number of unprocessed messages in the message queue of the agent.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultTimeout">
      <MemberSignature Language="C#" Value="public int DefaultTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DefaultTimeout" />
      <MemberSignature Language="DocId" Value="P:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.DefaultTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultTimeout As Integer" />
      <MemberSignature Language="F#" Value="member this.DefaultTimeout : int with get, set" Usage="Microsoft.FSharp.Control.MailboxProcessor&lt;'Msg&gt;.DefaultTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raises a timeout exception if a message not received in this amount of time. By default
 no timeout is used.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public event Microsoft.FSharp.Control.FSharpHandler&lt;Exception&gt; Error;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.FSharp.Control.FSharpHandler`1&lt;class System.Exception&gt; Error" />
      <MemberSignature Language="DocId" Value="E:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.Error" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Error As FSharpHandler(Of Exception) " />
      <MemberSignature Language="F#" Value="member this.Error : Handler&lt;Exception&gt; " Usage="member this.Error : Microsoft.FSharp.Control.Handler&lt;System.Exception&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CLIEvent</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>add: Microsoft.FSharp.Core.CLIEvent</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>remove: Microsoft.FSharp.Core.CLIEvent</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Control.FSharpHandler&lt;System.Exception&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public void Post (TMsg message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Post(!TMsg message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.Post(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Post (message As TMsg)" />
      <MemberSignature Language="F#" Value="member this.Post : 'Msg -&gt; unit" Usage="mailboxProcessor.Post message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="TMsg" />
      </Parameters>
      <Docs>
        <param name="message">The message to post.</param>
        <summary>Posts a message to the message queue of the MailboxProcessor, asynchronously.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostAndAsyncReply&lt;TReply&gt;">
      <MemberSignature Language="C#" Value="public Microsoft.FSharp.Control.FSharpAsync&lt;TReply&gt; PostAndAsyncReply&lt;TReply&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;Microsoft.FSharp.Control.FSharpAsyncReplyChannel&lt;TReply&gt;,TMsg&gt; buildMessage, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.FSharp.Control.FSharpAsync`1&lt;!!TReply&gt; PostAndAsyncReply&lt;TReply&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;class Microsoft.FSharp.Control.FSharpAsyncReplyChannel`1&lt;!!TReply&gt;, !TMsg&gt; buildMessage, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.PostAndAsyncReply``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Control.FSharpAsyncReplyChannel{``0},`0},Microsoft.FSharp.Core.FSharpOption{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAndAsyncReply(Of TReply) (buildMessage As FSharpFunc(Of FSharpAsyncReplyChannel(Of TReply), TMsg), timeout As FSharpOption(Of Integer)) As FSharpAsync(Of TReply)" />
      <MemberSignature Language="F#" Value="member this.PostAndAsyncReply : (AsyncReplyChannel&lt;'Reply&gt; -&gt; 'Msg) * option&lt;int&gt; -&gt; Async&lt;'Reply&gt;" Usage="mailboxProcessor.PostAndAsyncReply (buildMessage, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Control.FSharpAsync&lt;TReply&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TReply" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="buildMessage" Type="Microsoft.FSharp.Core.FSharpFunc&lt;Microsoft.FSharp.Control.FSharpAsyncReplyChannel&lt;TReply&gt;,TMsg&gt;" />
        <Parameter Name="timeout" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.FSharp.Core.OptionalArgument</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TReply">To be added.</typeparam>
        <param name="buildMessage">The function to incorporate the AsyncReplyChannel into
 the message to be sent.</param>
        <param name="timeout">An optional timeout parameter (in milliseconds) to wait for a reply message.
 Defaults to -1 which corresponds to <c>System.Threading.Timeout.Infinite</c>.</param>
        <summary>Posts a message to an agent and await a reply on the channel, asynchronously.</summary>
        <returns>An asynchronous computation that will wait for the reply from the agent.</returns>
        <remarks>The message is generated by applying <c>buildMessage</c> to a new reply channel 
 to be incorporated into the message. The receiving agent must process this 
 message and invoke the Reply method on this reply channel precisely once.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostAndReply&lt;TReply&gt;">
      <MemberSignature Language="C#" Value="public TReply PostAndReply&lt;TReply&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;Microsoft.FSharp.Control.FSharpAsyncReplyChannel&lt;TReply&gt;,TMsg&gt; buildMessage, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TReply PostAndReply&lt;TReply&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;class Microsoft.FSharp.Control.FSharpAsyncReplyChannel`1&lt;!!TReply&gt;, !TMsg&gt; buildMessage, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.PostAndReply``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Control.FSharpAsyncReplyChannel{``0},`0},Microsoft.FSharp.Core.FSharpOption{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAndReply(Of TReply) (buildMessage As FSharpFunc(Of FSharpAsyncReplyChannel(Of TReply), TMsg), timeout As FSharpOption(Of Integer)) As TReply" />
      <MemberSignature Language="F#" Value="member this.PostAndReply : (AsyncReplyChannel&lt;'Reply&gt; -&gt; 'Msg) * option&lt;int&gt; -&gt; 'Reply" Usage="mailboxProcessor.PostAndReply (buildMessage, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TReply</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TReply" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="buildMessage" Type="Microsoft.FSharp.Core.FSharpFunc&lt;Microsoft.FSharp.Control.FSharpAsyncReplyChannel&lt;TReply&gt;,TMsg&gt;" />
        <Parameter Name="timeout" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.FSharp.Core.OptionalArgument</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TReply">To be added.</typeparam>
        <param name="buildMessage">The function to incorporate the AsyncReplyChannel into
 the message to be sent.</param>
        <param name="timeout">An optional timeout parameter (in milliseconds) to wait for a reply message.
 Defaults to -1 which corresponds to <c>System.Threading.Timeout.Infinite</c>.</param>
        <summary>Posts a message to an agent and await a reply on the channel, synchronously.</summary>
        <returns>The reply from the agent.</returns>
        <remarks>The message is generated by applying <c>buildMessage</c> to a new reply channel 
 to be incorporated into the message. The receiving agent must process this 
 message and invoke the Reply method on this reply channel precisely once.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostAndTryAsyncReply&lt;TReply&gt;">
      <MemberSignature Language="C#" Value="public Microsoft.FSharp.Control.FSharpAsync&lt;Microsoft.FSharp.Core.FSharpOption&lt;TReply&gt;&gt; PostAndTryAsyncReply&lt;TReply&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;Microsoft.FSharp.Control.FSharpAsyncReplyChannel&lt;TReply&gt;,TMsg&gt; buildMessage, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.FSharp.Control.FSharpAsync`1&lt;class Microsoft.FSharp.Core.FSharpOption`1&lt;!!TReply&gt;&gt; PostAndTryAsyncReply&lt;TReply&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;class Microsoft.FSharp.Control.FSharpAsyncReplyChannel`1&lt;!!TReply&gt;, !TMsg&gt; buildMessage, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.PostAndTryAsyncReply``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Control.FSharpAsyncReplyChannel{``0},`0},Microsoft.FSharp.Core.FSharpOption{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAndTryAsyncReply(Of TReply) (buildMessage As FSharpFunc(Of FSharpAsyncReplyChannel(Of TReply), TMsg), timeout As FSharpOption(Of Integer)) As FSharpAsync(Of FSharpOption(Of TReply))" />
      <MemberSignature Language="F#" Value="member this.PostAndTryAsyncReply : (AsyncReplyChannel&lt;'Reply&gt; -&gt; 'Msg) * option&lt;int&gt; -&gt; Async&lt;option&lt;'Reply&gt;&gt;" Usage="mailboxProcessor.PostAndTryAsyncReply (buildMessage, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Control.FSharpAsync&lt;Microsoft.FSharp.Core.FSharpOption&lt;TReply&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TReply" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="buildMessage" Type="Microsoft.FSharp.Core.FSharpFunc&lt;Microsoft.FSharp.Control.FSharpAsyncReplyChannel&lt;TReply&gt;,TMsg&gt;" />
        <Parameter Name="timeout" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.FSharp.Core.OptionalArgument</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TReply">To be added.</typeparam>
        <param name="buildMessage">The function to incorporate the AsyncReplyChannel into
 the message to be sent.</param>
        <param name="timeout">An optional timeout parameter (in milliseconds) to wait for a reply message.
 Defaults to -1 which corresponds to <c>System.Threading.Timeout.Infinite</c>.</param>
        <summary>Like AsyncPostAndReply, but returns None if no reply within the timeout period.</summary>
        <returns>An asynchronous computation that will return the reply or None if the timeout expires.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public Microsoft.FSharp.Control.FSharpAsync&lt;TMsg&gt; Receive (Microsoft.FSharp.Core.FSharpOption&lt;int&gt; timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.FSharp.Control.FSharpAsync`1&lt;!TMsg&gt; Receive(class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.Receive(Microsoft.FSharp.Core.FSharpOption{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (timeout As FSharpOption(Of Integer)) As FSharpAsync(Of TMsg)" />
      <MemberSignature Language="F#" Value="member this.Receive : option&lt;int&gt; -&gt; Async&lt;'Msg&gt;" Usage="mailboxProcessor.Receive timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Control.FSharpAsync&lt;TMsg&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.FSharp.Core.OptionalArgument</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="timeout">An optional timeout in milliseconds. Defaults to -1 which corresponds
 to <c>System.Threading.Timeout.Infinite</c>.</param>
        <summary>Waits for a message. This will consume the first message in arrival order.</summary>
        <returns>An asynchronous computation that returns the received message.</returns>
        <remarks>This method is for use within the body of the agent. 

 This method is for use within the body of the agent. For each agent, at most 
 one concurrent reader may be active, so no more than one concurrent call to 
 Receive, TryReceive, Scan and/or TryScan may be active.</remarks>
        <exception cref="System.TimeoutException">Thrown when the timeout is exceeded.</exception>
      </Docs>
    </Member>
    <Member MemberName="Scan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public Microsoft.FSharp.Control.FSharpAsync&lt;T&gt; Scan&lt;T&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;TMsg,Microsoft.FSharp.Core.FSharpOption&lt;Microsoft.FSharp.Control.FSharpAsync&lt;T&gt;&gt;&gt; scanner, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.FSharp.Control.FSharpAsync`1&lt;!!T&gt; Scan&lt;T&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;!TMsg, class Microsoft.FSharp.Core.FSharpOption`1&lt;class Microsoft.FSharp.Control.FSharpAsync`1&lt;!!T&gt;&gt;&gt; scanner, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.Scan``1(Microsoft.FSharp.Core.FSharpFunc{`0,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Control.FSharpAsync{``0}}},Microsoft.FSharp.Core.FSharpOption{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function Scan(Of T) (scanner As FSharpFunc(Of TMsg, FSharpOption(Of FSharpAsync(Of T))), timeout As FSharpOption(Of Integer)) As FSharpAsync(Of T)" />
      <MemberSignature Language="F#" Value="member this.Scan : ('Msg -&gt; option&lt;Async&lt;'T&gt;&gt;) * option&lt;int&gt; -&gt; Async&lt;'T&gt;" Usage="mailboxProcessor.Scan (scanner, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Control.FSharpAsync&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="scanner" Type="Microsoft.FSharp.Core.FSharpFunc&lt;TMsg,Microsoft.FSharp.Core.FSharpOption&lt;Microsoft.FSharp.Control.FSharpAsync&lt;T&gt;&gt;&gt;" />
        <Parameter Name="timeout" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.FSharp.Core.OptionalArgument</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="scanner">The function to return None if the message is to be skipped
 or Some if the message is to be processed and removed from the queue.</param>
        <param name="timeout">An optional timeout in milliseconds. Defaults to -1 which corresponds
 to <c>System.Threading.Timeout.Infinite</c>.</param>
        <summary>Scans for a message by looking through messages in arrival order until <c>scanner</c> 
 returns a Some value. Other messages remain in the queue.</summary>
        <returns>An asynchronous computation that <c>scanner</c> built off the read message.</returns>
        <remarks>Returns None if a timeout is given and the timeout is exceeded.

 This method is for use within the body of the agent. For each agent, at most 
 one concurrent reader may be active, so no more than one concurrent call to 
 Receive, TryReceive, Scan and/or TryScan may be active.</remarks>
        <exception cref="System.TimeoutException">Thrown when the timeout is exceeded.</exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="mailboxProcessor.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts the agent.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Control.FSharpMailboxProcessor&lt;TMsg&gt; Start (Microsoft.FSharp.Core.FSharpFunc&lt;Microsoft.FSharp.Control.FSharpMailboxProcessor&lt;TMsg&gt;,Microsoft.FSharp.Control.FSharpAsync&lt;Microsoft.FSharp.Core.Unit&gt;&gt; body, Microsoft.FSharp.Core.FSharpOption&lt;System.Threading.CancellationToken&gt; cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Control.FSharpMailboxProcessor`1&lt;!TMsg&gt; Start(class Microsoft.FSharp.Core.FSharpFunc`2&lt;class Microsoft.FSharp.Control.FSharpMailboxProcessor`1&lt;!TMsg&gt;, class Microsoft.FSharp.Control.FSharpAsync`1&lt;class Microsoft.FSharp.Core.Unit&gt;&gt; body, class Microsoft.FSharp.Core.FSharpOption`1&lt;valuetype System.Threading.CancellationToken&gt; cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.Start(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Control.FSharpMailboxProcessor{`0},Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Start (body As FSharpFunc(Of FSharpMailboxProcessor(Of TMsg), FSharpAsync(Of Unit)), cancellationToken As FSharpOption(Of CancellationToken)) As FSharpMailboxProcessor(Of TMsg)" />
      <MemberSignature Language="F#" Value="static member Start : (MailboxProcessor&lt;'Msg&gt; -&gt; Async&lt;unit&gt;) * option&lt;System.Threading.CancellationToken&gt; -&gt; MailboxProcessor&lt;'Msg&gt;" Usage="Microsoft.FSharp.Control.MailboxProcessor&lt;'Msg&gt;.Start (body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Control.FSharpMailboxProcessor&lt;TMsg&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="Microsoft.FSharp.Core.FSharpFunc&lt;Microsoft.FSharp.Control.FSharpMailboxProcessor&lt;TMsg&gt;,Microsoft.FSharp.Control.FSharpAsync&lt;Microsoft.FSharp.Core.Unit&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Threading.CancellationToken&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.FSharp.Core.OptionalArgument</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">The function to produce an asynchronous computation that will be executed
 as the read loop for the MailboxProcessor when Start is called.</param>
        <param name="cancellationToken">An optional cancellation token for the <c>body</c>.
 Defaults to <c>Async.DefaultCancellationToken</c>.</param>
        <summary>Creates and starts an agent. The <c>body</c> function is used to generate the asynchronous 
 computation executed by the agent.</summary>
        <returns>The created MailboxProcessor.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryPostAndReply&lt;TReply&gt;">
      <MemberSignature Language="C#" Value="public Microsoft.FSharp.Core.FSharpOption&lt;TReply&gt; TryPostAndReply&lt;TReply&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;Microsoft.FSharp.Control.FSharpAsyncReplyChannel&lt;TReply&gt;,TMsg&gt; buildMessage, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.FSharp.Core.FSharpOption`1&lt;!!TReply&gt; TryPostAndReply&lt;TReply&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;class Microsoft.FSharp.Control.FSharpAsyncReplyChannel`1&lt;!!TReply&gt;, !TMsg&gt; buildMessage, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.TryPostAndReply``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Control.FSharpAsyncReplyChannel{``0},`0},Microsoft.FSharp.Core.FSharpOption{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPostAndReply(Of TReply) (buildMessage As FSharpFunc(Of FSharpAsyncReplyChannel(Of TReply), TMsg), timeout As FSharpOption(Of Integer)) As FSharpOption(Of TReply)" />
      <MemberSignature Language="F#" Value="member this.TryPostAndReply : (AsyncReplyChannel&lt;'Reply&gt; -&gt; 'Msg) * option&lt;int&gt; -&gt; option&lt;'Reply&gt;" Usage="mailboxProcessor.TryPostAndReply (buildMessage, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Core.FSharpOption&lt;TReply&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TReply" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="buildMessage" Type="Microsoft.FSharp.Core.FSharpFunc&lt;Microsoft.FSharp.Control.FSharpAsyncReplyChannel&lt;TReply&gt;,TMsg&gt;" />
        <Parameter Name="timeout" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.FSharp.Core.OptionalArgument</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TReply">To be added.</typeparam>
        <param name="buildMessage">The function to incorporate the AsyncReplyChannel into
 the message to be sent.</param>
        <param name="timeout">An optional timeout parameter (in milliseconds) to wait for a reply message.
 Defaults to -1 which corresponds to <c>System.Threading.Timeout.Infinite</c>.</param>
        <summary>Like PostAndReply, but returns None if no reply within the timeout period.</summary>
        <returns>The reply from the agent or None if the timeout expires.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReceive">
      <MemberSignature Language="C#" Value="public Microsoft.FSharp.Control.FSharpAsync&lt;Microsoft.FSharp.Core.FSharpOption&lt;TMsg&gt;&gt; TryReceive (Microsoft.FSharp.Core.FSharpOption&lt;int&gt; timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.FSharp.Control.FSharpAsync`1&lt;class Microsoft.FSharp.Core.FSharpOption`1&lt;!TMsg&gt;&gt; TryReceive(class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.TryReceive(Microsoft.FSharp.Core.FSharpOption{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceive (timeout As FSharpOption(Of Integer)) As FSharpAsync(Of FSharpOption(Of TMsg))" />
      <MemberSignature Language="F#" Value="member this.TryReceive : option&lt;int&gt; -&gt; Async&lt;option&lt;'Msg&gt;&gt;" Usage="mailboxProcessor.TryReceive timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Control.FSharpAsync&lt;Microsoft.FSharp.Core.FSharpOption&lt;TMsg&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.FSharp.Core.OptionalArgument</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="timeout">An optional timeout in milliseconds. Defaults to -1 which
 corresponds to <c>System.Threading.Timeout.Infinite</c>.</param>
        <summary>Waits for a message. This will consume the first message in arrival order.</summary>
        <returns>An asynchronous computation that returns the received message or
 None if the timeout is exceeded.</returns>
        <remarks>This method is for use within the body of the agent. 

 Returns None if a timeout is given and the timeout is exceeded.

 This method is for use within the body of the agent. For each agent, at most 
 one concurrent reader may be active, so no more than one concurrent call to 
 Receive, TryReceive, Scan and/or TryScan may be active.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryScan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public Microsoft.FSharp.Control.FSharpAsync&lt;Microsoft.FSharp.Core.FSharpOption&lt;T&gt;&gt; TryScan&lt;T&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;TMsg,Microsoft.FSharp.Core.FSharpOption&lt;Microsoft.FSharp.Control.FSharpAsync&lt;T&gt;&gt;&gt; scanner, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.FSharp.Control.FSharpAsync`1&lt;class Microsoft.FSharp.Core.FSharpOption`1&lt;!!T&gt;&gt; TryScan&lt;T&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;!TMsg, class Microsoft.FSharp.Core.FSharpOption`1&lt;class Microsoft.FSharp.Control.FSharpAsync`1&lt;!!T&gt;&gt;&gt; scanner, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.TryScan``1(Microsoft.FSharp.Core.FSharpFunc{`0,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Control.FSharpAsync{``0}}},Microsoft.FSharp.Core.FSharpOption{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryScan(Of T) (scanner As FSharpFunc(Of TMsg, FSharpOption(Of FSharpAsync(Of T))), timeout As FSharpOption(Of Integer)) As FSharpAsync(Of FSharpOption(Of T))" />
      <MemberSignature Language="F#" Value="member this.TryScan : ('Msg -&gt; option&lt;Async&lt;'T&gt;&gt;) * option&lt;int&gt; -&gt; Async&lt;option&lt;'T&gt;&gt;" Usage="mailboxProcessor.TryScan (scanner, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Control.FSharpAsync&lt;Microsoft.FSharp.Core.FSharpOption&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="scanner" Type="Microsoft.FSharp.Core.FSharpFunc&lt;TMsg,Microsoft.FSharp.Core.FSharpOption&lt;Microsoft.FSharp.Control.FSharpAsync&lt;T&gt;&gt;&gt;" />
        <Parameter Name="timeout" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.FSharp.Core.OptionalArgument</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="scanner">The function to return None if the message is to be skipped
 or Some if the message is to be processed and removed from the queue.</param>
        <param name="timeout">An optional timeout in milliseconds. Defaults to -1 which corresponds
 to <c>System.Threading.Timeout.Infinite</c>.</param>
        <summary>Scans for a message by looking through messages in arrival order until <c>scanner</c> 
 returns a Some value. Other messages remain in the queue.</summary>
        <returns>An asynchronous computation that <c>scanner</c> built off the read message.</returns>
        <remarks>This method is for use within the body of the agent. For each agent, at most 
 one concurrent reader may be active, so no more than one concurrent call to 
 Receive, TryReceive, Scan and/or TryScan may be active.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>