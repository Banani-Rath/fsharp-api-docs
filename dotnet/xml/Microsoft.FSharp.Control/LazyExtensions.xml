<Type Name="LazyExtensions" FullName="Microsoft.FSharp.Control.LazyExtensions">
  <TypeSignature Language="C#" Value="public static class LazyExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed LazyExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.FSharp.Control.LazyExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Class LazyExtensions" />
  <TypeSignature Language="F#" Value="module LazyExtensions" />
  <AssemblyInfo>
    <AssemblyName>FSharp.Core</AssemblyName>
    <AssemblyVersion>4.4.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.AutoOpen</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.Module)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Extensions related to Lazy values.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Create&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Lazy&lt;T&gt; Create&lt;T&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;Microsoft.FSharp.Core.Unit,T&gt; creator);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Lazy`1&lt;!!T&gt; Create&lt;T&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;class Microsoft.FSharp.Core.Unit, !!T&gt; creator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Control.LazyExtensions.Create``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of T) (creator As FSharpFunc(Of Unit, T)) As Lazy(Of T)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Control.LazyExtensions.Create : (unit -&gt; 'T) -&gt; Lazy&lt;'T&gt;" Usage="Microsoft.FSharp.Control.LazyExtensions.Create creator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("Create")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="creator" Type="Microsoft.FSharp.Core.FSharpFunc&lt;Microsoft.FSharp.Core.Unit,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="creator">The function to provide the value when needed.</param>
        <summary>Creates a lazy computation that evaluates to the result of the given function when forced.</summary>
        <returns>The created Lazy object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFromValue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Lazy&lt;T&gt; CreateFromValue&lt;T&gt; (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Lazy`1&lt;!!T&gt; CreateFromValue&lt;T&gt;(!!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Control.LazyExtensions.CreateFromValue``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromValue(Of T) (value As T) As Lazy(Of T)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Control.LazyExtensions.CreateFromValue : 'T -&gt; Lazy&lt;'T&gt;" Usage="Microsoft.FSharp.Control.LazyExtensions.CreateFromValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("CreateFromValue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="value">The input value.</param>
        <summary>Creates a lazy computation that evaluates to the given value when forced.</summary>
        <returns>The created Lazy object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Force&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Force&lt;T&gt; (Lazy&lt;T&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T Force&lt;T&gt;(class System.Lazy`1&lt;!!T&gt; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Control.LazyExtensions.Force``1(System.Lazy{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Force(Of T) ( As Lazy(Of T)) As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Control.LazyExtensions.Force : Lazy&lt;'T&gt; -&gt; 'T" Usage="Microsoft.FSharp.Control.LazyExtensions.Force " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("Force")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="" Type="System.Lazy&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="">To be added.</param>
        <summary>Forces the execution of this value and return its result. Same as Value. Mutual exclusion is used to 
 prevent other threads also computing the value.</summary>
        <returns>The value of the Lazy object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>