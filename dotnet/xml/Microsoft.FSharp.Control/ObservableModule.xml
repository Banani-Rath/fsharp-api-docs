<Type Name="ObservableModule" FullName="Microsoft.FSharp.Control.ObservableModule">
  <TypeSignature Language="C#" Value="public static class ObservableModule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed ObservableModule extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.FSharp.Control.ObservableModule" />
  <TypeSignature Language="VB.NET" Value="Public Class ObservableModule" />
  <TypeSignature Language="F#" Value="module Observable" />
  <AssemblyInfo>
    <AssemblyName>FSharp.Core</AssemblyName>
    <AssemblyVersion>4.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.Module)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.CompilationRepresentation(Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.RequireQualifiedAccess</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Basic operations on first class event and other observable objects.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Add&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Add&lt;T&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.Unit&gt; callback, IObservable&lt;T&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Add&lt;T&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T, class Microsoft.FSharp.Core.Unit&gt; callback, class System.IObservable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Control.ObservableModule.Add``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},System.IObservable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Add(Of T) (callback As FSharpFunc(Of T, Unit), source As IObservable(Of T))" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Control.Observable.add : ('T -&gt; unit) -&gt; IObservable&lt;'T&gt; -&gt; unit" Usage="Microsoft.FSharp.Control.ObservableModule.Add callback source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("add")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.Unit&gt;" />
        <Parameter Name="source" Type="System.IObservable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="callback">The function to be called on each observation.</param>
        <param name="source">The input Observable.</param>
        <summary>Creates an observer which permanently subscribes to the given observable and which calls
 the given function for each observation.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T,TResult&gt;">
      <MemberSignature Language="C#" Value="public static IObservable&lt;TResult&gt; Choose&lt;T,TResult&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.FSharpOption&lt;TResult&gt;&gt; chooser, IObservable&lt;T&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.IObservable`1&lt;!!TResult&gt; Choose&lt;T, TResult&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T, class Microsoft.FSharp.Core.FSharpOption`1&lt;!!TResult&gt;&gt; chooser, class System.IObservable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Control.ObservableModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.IObservable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Choose(Of T, TResult) (chooser As FSharpFunc(Of T, FSharpOption(Of TResult)), source As IObservable(Of T)) As IObservable(Of TResult)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Control.Observable.choose : ('T -&gt; option&lt;'Result&gt;) -&gt; IObservable&lt;'T&gt; -&gt; IObservable&lt;'Result&gt;" Usage="Microsoft.FSharp.Control.ObservableModule.Choose chooser source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("choose")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IObservable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="chooser" Type="Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.FSharpOption&lt;TResult&gt;&gt;" />
        <Parameter Name="source" Type="System.IObservable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="chooser">The function that returns Some for observations to be propagated
 and None for observations to ignore.</param>
        <param name="source">The input Observable.</param>
        <summary>Returns an observable which chooses a projection of observations from the source 
 using the given function. The returned object will trigger observations <c>x</c>
 for which the splitter returns <c>Some x</c>. The returned object also propagates 
 all errors arising from the source and completes when the source completes.</summary>
        <returns>An Observable that only propagates some of the observations from the source.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static IObservable&lt;T&gt; Filter&lt;T&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;T,bool&gt; predicate, IObservable&lt;T&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.IObservable`1&lt;!!T&gt; Filter&lt;T&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T, bool&gt; predicate, class System.IObservable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Control.ObservableModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.IObservable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Filter(Of T) (predicate As FSharpFunc(Of T, Boolean), source As IObservable(Of T)) As IObservable(Of T)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Control.Observable.filter : ('T -&gt; bool) -&gt; IObservable&lt;'T&gt; -&gt; IObservable&lt;'T&gt;" Usage="Microsoft.FSharp.Control.ObservableModule.Filter predicate source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("filter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IObservable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="predicate" Type="Microsoft.FSharp.Core.FSharpFunc&lt;T,System.Boolean&gt;" />
        <Parameter Name="source" Type="System.IObservable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="predicate">To be added.</param>
        <param name="source">The input Observable.</param>
        <summary>Returns an observable which filters the observations of the source 
 by the given function. The observable will see only those observations
 for which the predicate returns true. The predicate is executed once for 
 each subscribed observer. The returned object also propagates error 
 observations arising from the source and completes when the source completes.</summary>
        <returns>An Observable that filters observations based on <c>filter</c>.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Map&lt;T,TResult&gt;">
      <MemberSignature Language="C#" Value="public static IObservable&lt;TResult&gt; Map&lt;T,TResult&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;T,TResult&gt; mapping, IObservable&lt;T&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.IObservable`1&lt;!!TResult&gt; Map&lt;T, TResult&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T, !!TResult&gt; mapping, class System.IObservable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Control.ObservableModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.IObservable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Map(Of T, TResult) (mapping As FSharpFunc(Of T, TResult), source As IObservable(Of T)) As IObservable(Of TResult)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Control.Observable.map : ('T -&gt; 'Result) -&gt; IObservable&lt;'T&gt; -&gt; IObservable&lt;'Result&gt;" Usage="Microsoft.FSharp.Control.ObservableModule.Map mapping source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("map")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IObservable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="mapping" Type="Microsoft.FSharp.Core.FSharpFunc&lt;T,TResult&gt;" />
        <Parameter Name="source" Type="System.IObservable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="mapping">The function applied to observations from the source.</param>
        <param name="source">The input Observable.</param>
        <summary>Returns an observable which transforms the observations of the source by the 
 given function. The transformation function is executed once for each 
 subscribed observer. The returned object also propagates error observations 
 arising from the source and completes when the source completes.</summary>
        <returns>An Observable of the type specified by <c>mapping</c>.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Merge&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static IObservable&lt;T&gt; Merge&lt;T&gt; (IObservable&lt;T&gt; source1, IObservable&lt;T&gt; source2);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.IObservable`1&lt;!!T&gt; Merge&lt;T&gt;(class System.IObservable`1&lt;!!T&gt; source1, class System.IObservable`1&lt;!!T&gt; source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Control.ObservableModule.Merge``1(System.IObservable{``0},System.IObservable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Merge(Of T) (source1 As IObservable(Of T), source2 As IObservable(Of T)) As IObservable(Of T)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Control.Observable.merge : IObservable&lt;'T&gt; -&gt; IObservable&lt;'T&gt; -&gt; IObservable&lt;'T&gt;" Usage="Microsoft.FSharp.Control.ObservableModule.Merge source1 source2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("merge")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IObservable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.IObservable&lt;T&gt;" />
        <Parameter Name="source2" Type="System.IObservable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="source1">The first Observable.</param>
        <param name="source2">The second Observable.</param>
        <summary>Returns an observable for the merged observations from the sources. 
 The returned object propagates success and error values arising 
 from either source and completes when both the sources have completed.</summary>
        <returns>An Observable that propagates information from both sources.</returns>
        <remarks>For each observer, the registered intermediate observing object is not 
 thread safe. That is, observations arising from the sources must not 
 be triggered concurrently on different threads.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pairwise&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static IObservable&lt;Tuple&lt;T,T&gt;&gt; Pairwise&lt;T&gt; (IObservable&lt;T&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.IObservable`1&lt;class System.Tuple`2&lt;!!T, !!T&gt;&gt; Pairwise&lt;T&gt;(class System.IObservable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Control.ObservableModule.Pairwise``1(System.IObservable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Pairwise(Of T) (source As IObservable(Of T)) As IObservable(Of Tuple(Of T, T))" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Control.Observable.pairwise : IObservable&lt;'T&gt; -&gt; IObservable&lt;'T * 'T&gt;" Usage="Microsoft.FSharp.Control.ObservableModule.Pairwise source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("pairwise")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IObservable&lt;System.Tuple&lt;T,T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.IObservable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="source">The input Observable.</param>
        <summary>Returns a new observable that triggers on the second and subsequent triggerings of the input observable.
 The Nth triggering of the input observable passes the arguments from the N-1th and Nth triggering as
 a pair. The argument passed to the N-1th triggering is held in hidden internal state until the 
 Nth triggering occurs.</summary>
        <returns>An Observable that triggers on successive pairs of observations from the input Observable.</returns>
        <remarks>For each observer, the registered intermediate observing object is not thread safe.
 That is, observations arising from the source must not be triggered concurrently 
 on different threads.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Partition&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Tuple&lt;IObservable&lt;T&gt;,IObservable&lt;T&gt;&gt; Partition&lt;T&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;T,bool&gt; predicate, IObservable&lt;T&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Tuple`2&lt;class System.IObservable`1&lt;!!T&gt;, class System.IObservable`1&lt;!!T&gt;&gt; Partition&lt;T&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T, bool&gt; predicate, class System.IObservable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Control.ObservableModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.IObservable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Partition(Of T) (predicate As FSharpFunc(Of T, Boolean), source As IObservable(Of T)) As Tuple(Of IObservable(Of T), IObservable(Of T))" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Control.Observable.partition : ('T -&gt; bool) -&gt; IObservable&lt;'T&gt; -&gt; IObservable&lt;'T&gt; * IObservable&lt;'T&gt;" Usage="Microsoft.FSharp.Control.ObservableModule.Partition predicate source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("partition")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;System.IObservable&lt;T&gt;,System.IObservable&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="predicate" Type="Microsoft.FSharp.Core.FSharpFunc&lt;T,System.Boolean&gt;" />
        <Parameter Name="source" Type="System.IObservable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="predicate">The function to determine which output Observable will trigger
 a particular observation.</param>
        <param name="source">The input Observable.</param>
        <summary>Returns two observables which partition the observations of the source by 
 the given function. The first will trigger observations for those values 
 for which the predicate returns true. The second will trigger observations 
 for those values where the predicate returns false. The predicate is 
 executed once for each subscribed observer. Both also propagate all error 
 observations arising from the source and each completes when the source 
 completes.</summary>
        <returns>A tuple of Observables.  The first triggers when the predicate returns true, and
 the second triggers when the predicate returns false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scan&lt;TResult,T&gt;">
      <MemberSignature Language="C#" Value="public static IObservable&lt;TResult&gt; Scan&lt;TResult,T&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;TResult,Microsoft.FSharp.Core.FSharpFunc&lt;T,TResult&gt;&gt; collector, TResult state, IObservable&lt;T&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.IObservable`1&lt;!!TResult&gt; Scan&lt;TResult, T&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!TResult, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T, !!TResult&gt;&gt; collector, !!TResult state, class System.IObservable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Control.ObservableModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``0}},``0,System.IObservable{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Scan(Of TResult, T) (collector As FSharpFunc(Of TResult, FSharpFunc(Of T, TResult)), state As TResult, source As IObservable(Of T)) As IObservable(Of TResult)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Control.Observable.scan : ('Result -&gt; 'T -&gt; 'Result) -&gt; 'Result -&gt; IObservable&lt;'T&gt; -&gt; IObservable&lt;'Result&gt;" Usage="Microsoft.FSharp.Control.ObservableModule.Scan collector state source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("scan")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IObservable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collector" Type="Microsoft.FSharp.Core.FSharpFunc&lt;TResult,Microsoft.FSharp.Core.FSharpFunc&lt;T,TResult&gt;&gt;" />
        <Parameter Name="state" Type="TResult" />
        <Parameter Name="source" Type="System.IObservable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <param name="collector">The function to update the state with each observation.</param>
        <param name="state">The initial state.</param>
        <param name="source">The input Observable.</param>
        <summary>Returns an observable which, for each observer, allocates an item of state
 and applies the given accumulating function to successive values arising from
 the input. The returned object will trigger observations for each computed 
 state value, excluding the initial value. The returned object propagates 
 all errors arising from the source and completes when the source completes.</summary>
        <returns>An Observable that triggers on the updated state values.</returns>
        <remarks>For each observer, the registered intermediate observing object is not thread safe.
 That is, observations arising from the source must not be triggered concurrently 
 on different threads.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Split&lt;T,TResult1,TResult2&gt;">
      <MemberSignature Language="C#" Value="public static Tuple&lt;IObservable&lt;TResult1&gt;,IObservable&lt;TResult2&gt;&gt; Split&lt;T,TResult1,TResult2&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.FSharpChoice&lt;TResult1,TResult2&gt;&gt; splitter, IObservable&lt;T&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Tuple`2&lt;class System.IObservable`1&lt;!!TResult1&gt;, class System.IObservable`1&lt;!!TResult2&gt;&gt; Split&lt;T, TResult1, TResult2&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T, class Microsoft.FSharp.Core.FSharpChoice`2&lt;!!TResult1, !!TResult2&gt;&gt; splitter, class System.IObservable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Control.ObservableModule.Split``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpChoice{``1,``2}},System.IObservable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Split(Of T, TResult1, TResult2) (splitter As FSharpFunc(Of T, FSharpChoice(Of TResult1, TResult2)), source As IObservable(Of T)) As Tuple(Of IObservable(Of TResult1), IObservable(Of TResult2))" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Control.Observable.split : ('T -&gt; Choice&lt;'TResult1, 'TResult2&gt;) -&gt; IObservable&lt;'T&gt; -&gt; IObservable&lt;'TResult1&gt; * IObservable&lt;'TResult2&gt;" Usage="Microsoft.FSharp.Control.ObservableModule.Split splitter source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("split")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;System.IObservable&lt;TResult1&gt;,System.IObservable&lt;TResult2&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TResult1" />
        <TypeParameter Name="TResult2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="splitter" Type="Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.FSharpChoice&lt;TResult1,TResult2&gt;&gt;" />
        <Parameter Name="source" Type="System.IObservable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <typeparam name="TResult1">To be added.</typeparam>
        <typeparam name="TResult2">To be added.</typeparam>
        <param name="splitter">The function that takes an observation an transforms
 it into one of the two output Choice types.</param>
        <param name="source">The input Observable.</param>
        <summary>Returns two observables which split the observations of the source by the 
 given function. The first will trigger observations <c>x</c> for which the 
 splitter returns <c>Choice1Of2 x</c>. The second will trigger observations 
 <c>y</c> for which the splitter returns <c>Choice2Of2 y</c> The splitter is 
 executed once for each subscribed observer. Both also propagate error 
 observations arising from the source and each completes when the source 
 completes.</summary>
        <returns>A tuple of Observables.  The first triggers when <c>splitter</c> returns Choice1of2
 and the second triggers when <c>splitter</c> returns Choice2of2.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subscribe&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static IDisposable Subscribe&lt;T&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.Unit&gt; callback, IObservable&lt;T&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.IDisposable Subscribe&lt;T&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T, class Microsoft.FSharp.Core.Unit&gt; callback, class System.IObservable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Control.ObservableModule.Subscribe``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},System.IObservable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subscribe(Of T) (callback As FSharpFunc(Of T, Unit), source As IObservable(Of T)) As IDisposable" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Control.Observable.subscribe : ('T -&gt; unit) -&gt; IObservable&lt;'T&gt; -&gt; IDisposable" Usage="Microsoft.FSharp.Control.ObservableModule.Subscribe callback source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("subscribe")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.Unit&gt;" />
        <Parameter Name="source" Type="System.IObservable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="callback">The function to be called on each observation.</param>
        <param name="source">The input Observable.</param>
        <summary>Creates an observer which subscribes to the given observable and which calls
 the given function for each observation.</summary>
        <returns>An object that will remove the callback if disposed.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>