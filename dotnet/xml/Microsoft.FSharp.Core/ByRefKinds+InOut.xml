<Type Name="ByRefKinds+InOut" FullName="Microsoft.FSharp.Core.ByRefKinds+InOut">
  <TypeSignature Language="C#" Value="public sealed class ByRefKinds.InOut" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi serializable sealed ByRefKinds/InOut extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.FSharp.Core.ByRefKinds.InOut" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ByRefKinds.InOut" />
  <TypeSignature Language="F#" Value="type ByRefKinds.InOut = class" />
  <AssemblyInfo>
    <AssemblyName>FSharp.Core</AssemblyName>
    <AssemblyVersion>4.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.ObjectType)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This construct is for use in the FSharp.Core library and should not be used directly", 1204, IsError=true, IsHidden=true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.Sealed</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
 Represents a byref that can be both read and written
</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members />
</Type>