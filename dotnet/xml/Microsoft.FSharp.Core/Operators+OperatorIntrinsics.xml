<Type Name="Operators+OperatorIntrinsics" FullName="Microsoft.FSharp.Core.Operators+OperatorIntrinsics">
  <TypeSignature Language="C#" Value="public static class Operators.OperatorIntrinsics" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi abstract sealed Operators/OperatorIntrinsics extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.FSharp.Core.Operators.OperatorIntrinsics" />
  <TypeSignature Language="VB.NET" Value="Public Class Operators.OperatorIntrinsics" />
  <TypeSignature Language="F#" Value="module Operators.OperatorIntrinsics" />
  <AssemblyInfo>
    <AssemblyName>FSharp.Core</AssemblyName>
    <AssemblyVersion>4.4.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.Module)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A module of compiler intrinsic functions for efficient implementations of F# integer ranges
 and dynamic invocations of other F# operators</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AbsDynamic&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T AbsDynamic&lt;T&gt; (T x);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T AbsDynamic&lt;T&gt;(!!T x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.AbsDynamic``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AbsDynamic(Of T) (x As T) As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.AbsDynamic : 'T -&gt; 'T" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.AbsDynamic x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="x">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcosDynamic&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T AcosDynamic&lt;T&gt; (T x);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T AcosDynamic&lt;T&gt;(!!T x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.AcosDynamic``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AcosDynamic(Of T) (x As T) As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.AcosDynamic : 'T -&gt; 'T" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.AcosDynamic x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="x">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsinDynamic&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T AsinDynamic&lt;T&gt; (T x);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T AsinDynamic&lt;T&gt;(!!T x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.AsinDynamic``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsinDynamic(Of T) (x As T) As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.AsinDynamic : 'T -&gt; 'T" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.AsinDynamic x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="x">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan2Dynamic&lt;T1,T2&gt;">
      <MemberSignature Language="C#" Value="public static T2 Atan2Dynamic&lt;T1,T2&gt; (T1 y, T1 x);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T2 Atan2Dynamic&lt;T1, T2&gt;(!!T1 y, !!T1 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.Atan2Dynamic``2(``0,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan2Dynamic(Of T1, T2) (y As T1, x As T1) As T2" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.Atan2Dynamic : 'T1 -&gt; 'T1 -&gt; 'T2" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.Atan2Dynamic y x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T2</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="y" Type="T1" />
        <Parameter Name="x" Type="T1" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <param name="y">To be added.</param>
        <param name="x">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AtanDynamic&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T AtanDynamic&lt;T&gt; (T x);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T AtanDynamic&lt;T&gt;(!!T x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.AtanDynamic``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AtanDynamic(Of T) (x As T) As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.AtanDynamic : 'T -&gt; 'T" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.AtanDynamic x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="x">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CeilingDynamic&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T CeilingDynamic&lt;T&gt; (T x);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T CeilingDynamic&lt;T&gt;(!!T x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.CeilingDynamic``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CeilingDynamic(Of T) (x As T) As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.CeilingDynamic : 'T -&gt; 'T" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.CeilingDynamic x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="x">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CosDynamic&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T CosDynamic&lt;T&gt; (T x);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T CosDynamic&lt;T&gt;(!!T x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.CosDynamic``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CosDynamic(Of T) (x As T) As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.CosDynamic : 'T -&gt; 'T" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.CosDynamic x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="x">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoshDynamic&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T CoshDynamic&lt;T&gt; (T x);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T CoshDynamic&lt;T&gt;(!!T x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.CoshDynamic``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CoshDynamic(Of T) (x As T) As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.CoshDynamic : 'T -&gt; 'T" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.CoshDynamic x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="x">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpDynamic&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T ExpDynamic&lt;T&gt; (T x);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T ExpDynamic&lt;T&gt;(!!T x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.ExpDynamic``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExpDynamic(Of T) (x As T) As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.ExpDynamic : 'T -&gt; 'T" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.ExpDynamic x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="x">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FloorDynamic&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T FloorDynamic&lt;T&gt; (T x);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T FloorDynamic&lt;T&gt;(!!T x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.FloorDynamic``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FloorDynamic(Of T) (x As T) As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.FloorDynamic : 'T -&gt; 'T" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.FloorDynamic x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="x">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArraySlice&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T[] GetArraySlice&lt;T&gt; (T[] source, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; start, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; finish);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T[] GetArraySlice&lt;T&gt;(!!T[] source, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; start, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; finish) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetArraySlice``1(``0[],Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetArraySlice(Of T) (source As T(), start As FSharpOption(Of Integer), finish As FSharpOption(Of Integer)) As T()" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetArraySlice : 'T[] -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; 'T[]" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetArraySlice source start finish" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T[]" />
        <Parameter Name="start" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="finish" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="source">The input array.</param>
        <param name="start">The start index.</param>
        <param name="finish">The end index.</param>
        <summary>Gets a slice of an array</summary>
        <returns>The sub array from the input indices.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArraySlice2D&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T[,] GetArraySlice2D&lt;T&gt; (T[,] source, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; start1, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; finish1, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; start2, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; finish2);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T[,] GetArraySlice2D&lt;T&gt;(!!T[,] source, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; start1, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; finish1, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; start2, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; finish2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetArraySlice2D``1(``0[0:,0:],Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetArraySlice2D(Of T) (source As T(,), start1 As FSharpOption(Of Integer), finish1 As FSharpOption(Of Integer), start2 As FSharpOption(Of Integer), finish2 As FSharpOption(Of Integer)) As T(,)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetArraySlice2D : 'T[,] -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; 'T[,]" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetArraySlice2D source start1 finish1 start2 finish2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T[,]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T[,]" />
        <Parameter Name="start1" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="finish1" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="start2" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="finish2" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="source">The source array.</param>
        <param name="start1">The start index of the first dimension.</param>
        <param name="finish1">The end index of the first dimension.</param>
        <param name="start2">The start index of the second dimension.</param>
        <param name="finish2">The end index of the second dimension.</param>
        <summary>Gets a region slice of an array</summary>
        <returns>The two dimensional sub array from the input indices.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArraySlice2DFixed1&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T[] GetArraySlice2DFixed1&lt;T&gt; (T[,] source, int index1, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; start2, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; finish2);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T[] GetArraySlice2DFixed1&lt;T&gt;(!!T[,] source, int32 index1, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; start2, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; finish2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetArraySlice2DFixed1``1(``0[0:,0:],System.Int32,Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetArraySlice2DFixed1(Of T) (source As T(,), index1 As Integer, start2 As FSharpOption(Of Integer), finish2 As FSharpOption(Of Integer)) As T()" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetArraySlice2DFixed1 : 'T[,] -&gt; int -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; 'T[]" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetArraySlice2DFixed1 source index1 start2 finish2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T[,]" />
        <Parameter Name="index1" Type="System.Int32" />
        <Parameter Name="start2" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="finish2" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="source">The source array.</param>
        <param name="index1">The index of the first dimension.</param>
        <param name="start2">The start index of the second dimension.</param>
        <param name="finish2">The end index of the second dimension.</param>
        <summary>Gets a vector slice of a 2D array. The index of the first dimension is fixed.</summary>
        <returns>The sub array from the input indices.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArraySlice2DFixed2&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T[] GetArraySlice2DFixed2&lt;T&gt; (T[,] source, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; start1, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; finish1, int index2);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T[] GetArraySlice2DFixed2&lt;T&gt;(!!T[,] source, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; start1, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; finish1, int32 index2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetArraySlice2DFixed2``1(``0[0:,0:],Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetArraySlice2DFixed2(Of T) (source As T(,), start1 As FSharpOption(Of Integer), finish1 As FSharpOption(Of Integer), index2 As Integer) As T()" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetArraySlice2DFixed2 : 'T[,] -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; int -&gt; 'T[]" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetArraySlice2DFixed2 source start1 finish1 index2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T[,]" />
        <Parameter Name="start1" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="finish1" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="index2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="source">The source array.</param>
        <param name="start1">The start index of the first dimension.</param>
        <param name="finish1">The end index of the first dimension.</param>
        <param name="index2">The fixed index of the second dimension.</param>
        <summary>Gets a vector slice of a 2D array. The index of the second dimension is fixed.</summary>
        <returns>The sub array from the input indices.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArraySlice3D&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T[,,] GetArraySlice3D&lt;T&gt; (T[,,] source, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; start1, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; finish1, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; start2, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; finish2, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; start3, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; finish3);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T[,,] GetArraySlice3D&lt;T&gt;(!!T[,,] source, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; start1, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; finish1, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; start2, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; finish2, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; start3, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; finish3) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetArraySlice3D``1(``0[0:,0:,0:],Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetArraySlice3D(Of T) (source As T(,,), start1 As FSharpOption(Of Integer), finish1 As FSharpOption(Of Integer), start2 As FSharpOption(Of Integer), finish2 As FSharpOption(Of Integer), start3 As FSharpOption(Of Integer), finish3 As FSharpOption(Of Integer)) As T(,,)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetArraySlice3D : 'T[,,] -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; 'T[,,]" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetArraySlice3D source start1 finish1 start2 finish2 start3 finish3" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T[,,]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T[,,]" />
        <Parameter Name="start1" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="finish1" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="start2" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="finish2" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="start3" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="finish3" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="source">The source array.</param>
        <param name="start1">The start index of the first dimension.</param>
        <param name="finish1">The end index of the first dimension.</param>
        <param name="start2">The start index of the second dimension.</param>
        <param name="finish2">The end index of the second dimension.</param>
        <param name="start3">The start index of the third dimension.</param>
        <param name="finish3">The end index of the third dimension.</param>
        <summary>Gets a slice of an array</summary>
        <returns>The three dimensional sub array from the given indices.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArraySlice4D&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T[,,,] GetArraySlice4D&lt;T&gt; (T[,,,] source, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; start1, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; finish1, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; start2, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; finish2, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; start3, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; finish3, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; start4, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; finish4);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T[,,,] GetArraySlice4D&lt;T&gt;(!!T[,,,] source, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; start1, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; finish1, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; start2, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; finish2, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; start3, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; finish3, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; start4, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; finish4) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetArraySlice4D``1(``0[0:,0:,0:,0:],Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetArraySlice4D(Of T) (source As T(,,,), start1 As FSharpOption(Of Integer), finish1 As FSharpOption(Of Integer), start2 As FSharpOption(Of Integer), finish2 As FSharpOption(Of Integer), start3 As FSharpOption(Of Integer), finish3 As FSharpOption(Of Integer), start4 As FSharpOption(Of Integer), finish4 As FSharpOption(Of Integer)) As T(,,,)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetArraySlice4D : 'T[,,,] -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; 'T[,,,]" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetArraySlice4D source start1 finish1 start2 finish2 start3 finish3 start4 finish4" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T[,,,]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T[,,,]" />
        <Parameter Name="start1" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="finish1" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="start2" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="finish2" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="start3" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="finish3" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="start4" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="finish4" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="source">The source array.</param>
        <param name="start1">The start index of the first dimension.</param>
        <param name="finish1">The end index of the first dimension.</param>
        <param name="start2">The start index of the second dimension.</param>
        <param name="finish2">The end index of the second dimension.</param>
        <param name="start3">The start index of the third dimension.</param>
        <param name="finish3">The end index of the third dimension.</param>
        <param name="start4">The start index of the fourth dimension.</param>
        <param name="finish4">The end index of the fourth dimension.</param>
        <summary>Gets a slice of an array</summary>
        <returns>The four dimensional sub array from the given indices.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStringSlice">
      <MemberSignature Language="C#" Value="public static string GetStringSlice (string source, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; start, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; finish);" />
      <MemberSignature Language="ILAsm" Value=".method public static string GetStringSlice(string source, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; start, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; finish) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetStringSlice(System.String,Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetStringSlice (source As String, start As FSharpOption(Of Integer), finish As FSharpOption(Of Integer)) As String" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetStringSlice : string -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; string" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetStringSlice source start finish" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="start" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="finish" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The source string.</param>
        <param name="start">The index of the first character of the slice.</param>
        <param name="finish">The index of the last character of the slice.</param>
        <summary>Gets a slice from a string</summary>
        <returns>The substring from the given indices.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10Dynamic&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Log10Dynamic&lt;T&gt; (T x);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T Log10Dynamic&lt;T&gt;(!!T x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.Log10Dynamic``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log10Dynamic(Of T) (x As T) As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.Log10Dynamic : 'T -&gt; 'T" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.Log10Dynamic x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="x">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogDynamic&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T LogDynamic&lt;T&gt; (T x);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T LogDynamic&lt;T&gt;(!!T x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.LogDynamic``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LogDynamic(Of T) (x As T) As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.LogDynamic : 'T -&gt; 'T" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.LogDynamic x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="x">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowByte">
      <MemberSignature Language="C#" Value="public static byte PowByte (byte x, int n);" />
      <MemberSignature Language="ILAsm" Value=".method public static unsigned int8 PowByte(unsigned int8 x, int32 n) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowByte(System.Byte,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowByte (x As Byte, n As Integer) As Byte" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowByte : byte -&gt; int -&gt; byte" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowByte x n" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Byte" />
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="n">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'byte'</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowDecimal">
      <MemberSignature Language="C#" Value="public static decimal PowDecimal (decimal x, int n);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal PowDecimal(valuetype System.Decimal x, int32 n) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowDecimal(System.Decimal,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowDecimal (x As Decimal, n As Integer) As Decimal" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowDecimal : decimal -&gt; int -&gt; decimal" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowDecimal x n" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Decimal" />
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="n">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'decimal'</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowDouble">
      <MemberSignature Language="C#" Value="public static double PowDouble (double x, int n);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PowDouble(float64 x, int32 n) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowDouble(System.Double,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowDouble (x As Double, n As Integer) As Double" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowDouble : double -&gt; int -&gt; double" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowDouble x n" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="n">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'float'</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowDynamic&lt;T,TResult&gt;">
      <MemberSignature Language="C#" Value="public static T PowDynamic&lt;T,TResult&gt; (T x, TResult y);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T PowDynamic&lt;T, TResult&gt;(!!T x, !!TResult y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowDynamic``2(``0,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowDynamic(Of T, TResult) (x As T, y As TResult) As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowDynamic : 'T -&gt; 'Result -&gt; 'T" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowDynamic x y" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="T" />
        <Parameter Name="y" Type="TResult" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowGeneric&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T PowGeneric&lt;T&gt; (T one, Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.FSharpFunc&lt;T,T&gt;&gt; mul, T value, int exponent);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T PowGeneric&lt;T&gt;(!!T one, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T, !!T&gt;&gt; mul, !!T value, int32 exponent) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowGeneric``1(``0,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowGeneric(Of T) (one As T, mul As FSharpFunc(Of T, FSharpFunc(Of T, T)), value As T, exponent As Integer) As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowGeneric : 'T * ('T -&gt; 'T -&gt; 'T) * 'T * int -&gt; 'T" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowGeneric (one, mul, value, exponent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="one" Type="T" />
        <Parameter Name="mul" Type="Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.FSharpFunc&lt;T,T&gt;&gt;" />
        <Parameter Name="value" Type="T" />
        <Parameter Name="exponent" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="one">To be added.</param>
        <param name="mul">To be added.</param>
        <param name="value">To be added.</param>
        <param name="exponent">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowInt16">
      <MemberSignature Language="C#" Value="public static short PowInt16 (short x, int n);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 PowInt16(int16 x, int32 n) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowInt16(System.Int16,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowInt16 (x As Short, n As Integer) As Short" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowInt16 : int16 -&gt; int -&gt; int16" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowInt16 x n" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int16" />
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="n">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'int16'</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowInt32">
      <MemberSignature Language="C#" Value="public static int PowInt32 (int x, int n);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 PowInt32(int32 x, int32 n) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowInt32(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowInt32 (x As Integer, n As Integer) As Integer" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowInt32 : int -&gt; int -&gt; int" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowInt32 x n" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="n">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'int32'</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowInt64">
      <MemberSignature Language="C#" Value="public static long PowInt64 (long x, int n);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 PowInt64(int64 x, int32 n) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowInt64(System.Int64,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowInt64 (x As Long, n As Integer) As Long" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowInt64 : int64 -&gt; int -&gt; int64" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowInt64 x n" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int64" />
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="n">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'int64'</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowIntPtr">
      <MemberSignature Language="C#" Value="public static IntPtr PowIntPtr (IntPtr x, int n);" />
      <MemberSignature Language="ILAsm" Value=".method public static native int PowIntPtr(native int x, int32 n) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowIntPtr(System.IntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowIntPtr (x As IntPtr, n As Integer) As IntPtr" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowIntPtr : nativeint -&gt; int -&gt; nativeint" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowIntPtr x n" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.IntPtr" />
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="n">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'nativeint'</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowSByte">
      <MemberSignature Language="C#" Value="public static sbyte PowSByte (sbyte x, int n);" />
      <MemberSignature Language="ILAsm" Value=".method public static int8 PowSByte(int8 x, int32 n) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowSByte(System.SByte,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowSByte (x As SByte, n As Integer) As SByte" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowSByte : sbyte -&gt; int -&gt; sbyte" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowSByte x n" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.SByte" />
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="n">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'sbyte'</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowSingle">
      <MemberSignature Language="C#" Value="public static float PowSingle (float x, int n);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 PowSingle(float32 x, int32 n) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowSingle(System.Single,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowSingle (x As Single, n As Integer) As Single" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowSingle : single -&gt; int -&gt; single" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowSingle x n" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="n">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'float32'</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowUInt16">
      <MemberSignature Language="C#" Value="public static ushort PowUInt16 (ushort x, int n);" />
      <MemberSignature Language="ILAsm" Value=".method public static unsigned int16 PowUInt16(unsigned int16 x, int32 n) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowUInt16(System.UInt16,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowUInt16 (x As UShort, n As Integer) As UShort" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowUInt16 : uint16 -&gt; int -&gt; uint16" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowUInt16 x n" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.UInt16" />
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="n">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'uint16'</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowUInt32">
      <MemberSignature Language="C#" Value="public static uint PowUInt32 (uint x, int n);" />
      <MemberSignature Language="ILAsm" Value=".method public static unsigned int32 PowUInt32(unsigned int32 x, int32 n) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowUInt32(System.UInt32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowUInt32 (x As UInteger, n As Integer) As UInteger" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowUInt32 : uint32 -&gt; int -&gt; uint32" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowUInt32 x n" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.UInt32" />
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="n">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'uint32'</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowUInt64">
      <MemberSignature Language="C#" Value="public static ulong PowUInt64 (ulong x, int n);" />
      <MemberSignature Language="ILAsm" Value=".method public static unsigned int64 PowUInt64(unsigned int64 x, int32 n) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowUInt64(System.UInt64,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowUInt64 (x As ULong, n As Integer) As ULong" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowUInt64 : uint64 -&gt; int -&gt; uint64" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowUInt64 x n" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.UInt64" />
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="n">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'uint64'</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowUIntPtr">
      <MemberSignature Language="C#" Value="public static UIntPtr PowUIntPtr (UIntPtr x, int n);" />
      <MemberSignature Language="ILAsm" Value=".method public static native unsigned int PowUIntPtr(native unsigned int x, int32 n) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowUIntPtr(System.UIntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowUIntPtr (x As UIntPtr, n As Integer) As UIntPtr" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowUIntPtr : unativeint -&gt; int -&gt; unativeint" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowUIntPtr x n" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UIntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.UIntPtr" />
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="n">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'unativeint'</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RangeByte">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;byte&gt; RangeByte (byte start, byte step, byte stop);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.Generic.IEnumerable`1&lt;unsigned int8&gt; RangeByte(unsigned int8 start, unsigned int8 step, unsigned int8 stop) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeByte(System.Byte,System.Byte,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RangeByte (start As Byte, step As Byte, stop As Byte) As IEnumerable(Of Byte)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeByte : byte -&gt; byte -&gt; byte -&gt; seq&lt;byte&gt;" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeByte start step stop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Byte" />
        <Parameter Name="step" Type="System.Byte" />
        <Parameter Name="stop" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <param name="step">To be added.</param>
        <param name="stop">To be added.</param>
        <summary>Generate a range of byte values</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RangeChar">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;char&gt; RangeChar (char start, char stop);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.Generic.IEnumerable`1&lt;char&gt; RangeChar(char start, char stop) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeChar(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RangeChar (start As Char, stop As Char) As IEnumerable(Of Char)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeChar : char -&gt; char -&gt; seq&lt;char&gt;" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeChar start stop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Char" />
        <Parameter Name="stop" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <param name="stop">To be added.</param>
        <summary>Generate a range of char values</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RangeDouble">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;double&gt; RangeDouble (double start, double step, double stop);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.Generic.IEnumerable`1&lt;float64&gt; RangeDouble(float64 start, float64 step, float64 stop) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeDouble(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RangeDouble (start As Double, step As Double, stop As Double) As IEnumerable(Of Double)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeDouble : double -&gt; double -&gt; double -&gt; seq&lt;double&gt;" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeDouble start step stop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Double" />
        <Parameter Name="step" Type="System.Double" />
        <Parameter Name="stop" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <param name="step">To be added.</param>
        <param name="stop">To be added.</param>
        <summary>Generate a range of float values</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RangeGeneric&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; RangeGeneric&lt;T&gt; (T one, Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.FSharpFunc&lt;T,T&gt;&gt; add, T start, T stop);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; RangeGeneric&lt;T&gt;(!!T one, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T, !!T&gt;&gt; add, !!T start, !!T stop) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeGeneric``1(``0,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RangeGeneric(Of T) (one As T, add As FSharpFunc(Of T, FSharpFunc(Of T, T)), start As T, stop As T) As IEnumerable(Of T)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeGeneric : 'T -&gt; ('T -&gt; 'T -&gt; 'T) -&gt; 'T -&gt; 'T -&gt; seq&lt;'T&gt;" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeGeneric one add start stop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="one" Type="T" />
        <Parameter Name="add" Type="Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.FSharpFunc&lt;T,T&gt;&gt;" />
        <Parameter Name="start" Type="T" />
        <Parameter Name="stop" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="one">To be added.</param>
        <param name="add">To be added.</param>
        <param name="start">To be added.</param>
        <param name="stop">To be added.</param>
        <summary>Generate a range of values using the given zero, add, start, step and stop values</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RangeInt16">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;short&gt; RangeInt16 (short start, short step, short stop);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.Generic.IEnumerable`1&lt;int16&gt; RangeInt16(int16 start, int16 step, int16 stop) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeInt16(System.Int16,System.Int16,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RangeInt16 (start As Short, step As Short, stop As Short) As IEnumerable(Of Short)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeInt16 : int16 -&gt; int16 -&gt; int16 -&gt; seq&lt;int16&gt;" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeInt16 start step stop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Int16&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int16" />
        <Parameter Name="step" Type="System.Int16" />
        <Parameter Name="stop" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <param name="step">To be added.</param>
        <param name="stop">To be added.</param>
        <summary>Generate a range of int16 values</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RangeInt32">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;int&gt; RangeInt32 (int start, int step, int stop);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.Generic.IEnumerable`1&lt;int32&gt; RangeInt32(int32 start, int32 step, int32 stop) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeInt32(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RangeInt32 (start As Integer, step As Integer, stop As Integer) As IEnumerable(Of Integer)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeInt32 : int -&gt; int -&gt; int -&gt; seq&lt;int&gt;" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeInt32 start step stop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="step" Type="System.Int32" />
        <Parameter Name="stop" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <param name="step">To be added.</param>
        <param name="stop">To be added.</param>
        <summary>Generate a range of integers</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RangeInt64">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;long&gt; RangeInt64 (long start, long step, long stop);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.Generic.IEnumerable`1&lt;int64&gt; RangeInt64(int64 start, int64 step, int64 stop) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeInt64(System.Int64,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RangeInt64 (start As Long, step As Long, stop As Long) As IEnumerable(Of Long)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeInt64 : int64 -&gt; int64 -&gt; int64 -&gt; seq&lt;int64&gt;" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeInt64 start step stop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int64" />
        <Parameter Name="step" Type="System.Int64" />
        <Parameter Name="stop" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <param name="step">To be added.</param>
        <param name="stop">To be added.</param>
        <summary>Generate a range of int64 values</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RangeIntPtr">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;IntPtr&gt; RangeIntPtr (IntPtr start, IntPtr step, IntPtr stop);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.Generic.IEnumerable`1&lt;native int&gt; RangeIntPtr(native int start, native int step, native int stop) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeIntPtr(System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RangeIntPtr (start As IntPtr, step As IntPtr, stop As IntPtr) As IEnumerable(Of IntPtr)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeIntPtr : nativeint -&gt; nativeint -&gt; nativeint -&gt; seq&lt;nativeint&gt;" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeIntPtr start step stop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.IntPtr&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.IntPtr" />
        <Parameter Name="step" Type="System.IntPtr" />
        <Parameter Name="stop" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <param name="step">To be added.</param>
        <param name="stop">To be added.</param>
        <summary>Generate a range of nativeint values</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RangeSByte">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;sbyte&gt; RangeSByte (sbyte start, sbyte step, sbyte stop);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.Generic.IEnumerable`1&lt;int8&gt; RangeSByte(int8 start, int8 step, int8 stop) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeSByte(System.SByte,System.SByte,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RangeSByte (start As SByte, step As SByte, stop As SByte) As IEnumerable(Of SByte)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeSByte : sbyte -&gt; sbyte -&gt; sbyte -&gt; seq&lt;sbyte&gt;" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeSByte start step stop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.SByte&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.SByte" />
        <Parameter Name="step" Type="System.SByte" />
        <Parameter Name="stop" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <param name="step">To be added.</param>
        <param name="stop">To be added.</param>
        <summary>Generate a range of sbyte values</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RangeSingle">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;float&gt; RangeSingle (float start, float step, float stop);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.Generic.IEnumerable`1&lt;float32&gt; RangeSingle(float32 start, float32 step, float32 stop) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeSingle(System.Single,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RangeSingle (start As Single, step As Single, stop As Single) As IEnumerable(Of Single)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeSingle : single -&gt; single -&gt; single -&gt; seq&lt;single&gt;" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeSingle start step stop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Single" />
        <Parameter Name="step" Type="System.Single" />
        <Parameter Name="stop" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <param name="step">To be added.</param>
        <param name="stop">To be added.</param>
        <summary>Generate a range of float32 values</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RangeStepGeneric&lt;TStep,T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; RangeStepGeneric&lt;TStep,T&gt; (TStep zero, Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.FSharpFunc&lt;TStep,T&gt;&gt; add, T start, TStep step, T stop);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; RangeStepGeneric&lt;TStep, T&gt;(!!TStep zero, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!TStep, !!T&gt;&gt; add, !!T start, !!TStep step, !!T stop) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeStepGeneric``2(``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,``0,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RangeStepGeneric(Of TStep, T) (zero As TStep, add As FSharpFunc(Of T, FSharpFunc(Of TStep, T)), start As T, step As TStep, stop As T) As IEnumerable(Of T)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeStepGeneric : 'Step -&gt; ('T -&gt; 'Step -&gt; 'T) -&gt; 'T -&gt; 'Step -&gt; 'T -&gt; seq&lt;'T&gt;" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeStepGeneric zero add start step stop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TStep" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="zero" Type="TStep" />
        <Parameter Name="add" Type="Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.FSharpFunc&lt;TStep,T&gt;&gt;" />
        <Parameter Name="start" Type="T" />
        <Parameter Name="step" Type="TStep" />
        <Parameter Name="stop" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="TStep">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <param name="zero">To be added.</param>
        <param name="add">To be added.</param>
        <param name="start">To be added.</param>
        <param name="step">To be added.</param>
        <param name="stop">To be added.</param>
        <summary>Generate a range of values using the given zero, add, start, step and stop values</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RangeUInt16">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;ushort&gt; RangeUInt16 (ushort start, ushort step, ushort stop);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.Generic.IEnumerable`1&lt;unsigned int16&gt; RangeUInt16(unsigned int16 start, unsigned int16 step, unsigned int16 stop) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeUInt16(System.UInt16,System.UInt16,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RangeUInt16 (start As UShort, step As UShort, stop As UShort) As IEnumerable(Of UShort)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeUInt16 : uint16 -&gt; uint16 -&gt; uint16 -&gt; seq&lt;uint16&gt;" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeUInt16 start step stop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.UInt16&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.UInt16" />
        <Parameter Name="step" Type="System.UInt16" />
        <Parameter Name="stop" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <param name="step">To be added.</param>
        <param name="stop">To be added.</param>
        <summary>Generate a range of uint16 values</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RangeUInt32">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;uint&gt; RangeUInt32 (uint start, uint step, uint stop);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.Generic.IEnumerable`1&lt;unsigned int32&gt; RangeUInt32(unsigned int32 start, unsigned int32 step, unsigned int32 stop) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeUInt32(System.UInt32,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RangeUInt32 (start As UInteger, step As UInteger, stop As UInteger) As IEnumerable(Of UInteger)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeUInt32 : uint32 -&gt; uint32 -&gt; uint32 -&gt; seq&lt;uint32&gt;" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeUInt32 start step stop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.UInt32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.UInt32" />
        <Parameter Name="step" Type="System.UInt32" />
        <Parameter Name="stop" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <param name="step">To be added.</param>
        <param name="stop">To be added.</param>
        <summary>Generate a range of uint32 values</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RangeUInt64">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;ulong&gt; RangeUInt64 (ulong start, ulong step, ulong stop);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.Generic.IEnumerable`1&lt;unsigned int64&gt; RangeUInt64(unsigned int64 start, unsigned int64 step, unsigned int64 stop) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeUInt64(System.UInt64,System.UInt64,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RangeUInt64 (start As ULong, step As ULong, stop As ULong) As IEnumerable(Of ULong)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeUInt64 : uint64 -&gt; uint64 -&gt; uint64 -&gt; seq&lt;uint64&gt;" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeUInt64 start step stop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.UInt64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.UInt64" />
        <Parameter Name="step" Type="System.UInt64" />
        <Parameter Name="stop" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <param name="step">To be added.</param>
        <param name="stop">To be added.</param>
        <summary>Generate a range of uint64 values</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RangeUIntPtr">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;UIntPtr&gt; RangeUIntPtr (UIntPtr start, UIntPtr step, UIntPtr stop);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.Generic.IEnumerable`1&lt;native unsigned int&gt; RangeUIntPtr(native unsigned int start, native unsigned int step, native unsigned int stop) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeUIntPtr(System.UIntPtr,System.UIntPtr,System.UIntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RangeUIntPtr (start As UIntPtr, step As UIntPtr, stop As UIntPtr) As IEnumerable(Of UIntPtr)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeUIntPtr : unativeint -&gt; unativeint -&gt; unativeint -&gt; seq&lt;unativeint&gt;" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeUIntPtr start step stop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.UIntPtr&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.UIntPtr" />
        <Parameter Name="step" Type="System.UIntPtr" />
        <Parameter Name="stop" Type="System.UIntPtr" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <param name="step">To be added.</param>
        <param name="stop">To be added.</param>
        <summary>Generate a range of unativeint values</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundDynamic&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T RoundDynamic&lt;T&gt; (T x);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T RoundDynamic&lt;T&gt;(!!T x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RoundDynamic``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RoundDynamic(Of T) (x As T) As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RoundDynamic : 'T -&gt; 'T" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RoundDynamic x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="x">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetArraySlice&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void SetArraySlice&lt;T&gt; (T[] target, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; start, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; finish, T[] source);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetArraySlice&lt;T&gt;(!!T[] target, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; start, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; finish, !!T[] source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SetArraySlice``1(``0[],Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},``0[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetArraySlice(Of T) (target As T(), start As FSharpOption(Of Integer), finish As FSharpOption(Of Integer), source As T())" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SetArraySlice : 'T[] -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; 'T[] -&gt; unit" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SetArraySlice target start finish source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T[]" />
        <Parameter Name="start" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="finish" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="source" Type="T[]" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="target">The target array.</param>
        <param name="start">The start index.</param>
        <param name="finish">The end index.</param>
        <param name="source">The source array.</param>
        <summary>Sets a slice of an array</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetArraySlice2D&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void SetArraySlice2D&lt;T&gt; (T[,] target, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; start1, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; finish1, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; start2, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; finish2, T[,] source);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetArraySlice2D&lt;T&gt;(!!T[,] target, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; start1, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; finish1, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; start2, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; finish2, !!T[,] source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SetArraySlice2D``1(``0[0:,0:],Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},``0[0:,0:])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetArraySlice2D(Of T) (target As T(,), start1 As FSharpOption(Of Integer), finish1 As FSharpOption(Of Integer), start2 As FSharpOption(Of Integer), finish2 As FSharpOption(Of Integer), source As T(,))" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SetArraySlice2D : 'T[,] -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; 'T[,] -&gt; unit" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SetArraySlice2D target start1 finish1 start2 finish2 source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T[,]" />
        <Parameter Name="start1" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="finish1" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="start2" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="finish2" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="source" Type="T[,]" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="target">The target array.</param>
        <param name="start1">The start index of the first dimension.</param>
        <param name="finish1">The end index of the first dimension.</param>
        <param name="start2">The start index of the second dimension.</param>
        <param name="finish2">The end index of the second dimension.</param>
        <param name="source">The source array.</param>
        <summary>Sets a region slice of an array</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetArraySlice2DFixed1&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void SetArraySlice2DFixed1&lt;T&gt; (T[,] target, int index1, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; start2, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; finish2, T[] source);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetArraySlice2DFixed1&lt;T&gt;(!!T[,] target, int32 index1, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; start2, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; finish2, !!T[] source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SetArraySlice2DFixed1``1(``0[0:,0:],System.Int32,Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},``0[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetArraySlice2DFixed1(Of T) (target As T(,), index1 As Integer, start2 As FSharpOption(Of Integer), finish2 As FSharpOption(Of Integer), source As T())" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SetArraySlice2DFixed1 : 'T[,] -&gt; int -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; 'T[] -&gt; unit" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SetArraySlice2DFixed1 target index1 start2 finish2 source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T[,]" />
        <Parameter Name="index1" Type="System.Int32" />
        <Parameter Name="start2" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="finish2" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="source" Type="T[]" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="target">The target array.</param>
        <param name="index1">The index of the first dimension.</param>
        <param name="start2">The start index of the second dimension.</param>
        <param name="finish2">The end index of the second dimension.</param>
        <param name="source">The source array.</param>
        <summary>Sets a vector slice of a 2D array. The index of the first dimension is fixed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetArraySlice2DFixed2&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void SetArraySlice2DFixed2&lt;T&gt; (T[,] target, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; start1, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; finish1, int index2, T[] source);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetArraySlice2DFixed2&lt;T&gt;(!!T[,] target, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; start1, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; finish1, int32 index2, !!T[] source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SetArraySlice2DFixed2``1(``0[0:,0:],Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},System.Int32,``0[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetArraySlice2DFixed2(Of T) (target As T(,), start1 As FSharpOption(Of Integer), finish1 As FSharpOption(Of Integer), index2 As Integer, source As T())" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SetArraySlice2DFixed2 : 'T[,] -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; int -&gt; 'T[] -&gt; unit" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SetArraySlice2DFixed2 target start1 finish1 index2 source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T[,]" />
        <Parameter Name="start1" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="finish1" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="index2" Type="System.Int32" />
        <Parameter Name="source" Type="T[]" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="target">The target array.</param>
        <param name="start1">The start index of the first dimension.</param>
        <param name="finish1">The end index of the first dimension.</param>
        <param name="index2">The index of the second dimension.</param>
        <param name="source">The source array.</param>
        <summary>Sets a vector slice of a 2D array. The index of the second dimension is fixed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetArraySlice3D&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void SetArraySlice3D&lt;T&gt; (T[,,] target, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; start1, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; finish1, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; start2, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; finish2, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; start3, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; finish3, T[,,] source);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetArraySlice3D&lt;T&gt;(!!T[,,] target, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; start1, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; finish1, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; start2, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; finish2, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; start3, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; finish3, !!T[,,] source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SetArraySlice3D``1(``0[0:,0:,0:],Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},``0[0:,0:,0:])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetArraySlice3D(Of T) (target As T(,,), start1 As FSharpOption(Of Integer), finish1 As FSharpOption(Of Integer), start2 As FSharpOption(Of Integer), finish2 As FSharpOption(Of Integer), start3 As FSharpOption(Of Integer), finish3 As FSharpOption(Of Integer), source As T(,,))" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SetArraySlice3D : 'T[,,] -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; 'T[,,] -&gt; unit" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SetArraySlice3D target start1 finish1 start2 finish2 start3 finish3 source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T[,,]" />
        <Parameter Name="start1" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="finish1" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="start2" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="finish2" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="start3" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="finish3" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="source" Type="T[,,]" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="target">The target array.</param>
        <param name="start1">The start index of the first dimension.</param>
        <param name="finish1">The end index of the first dimension.</param>
        <param name="start2">The start index of the second dimension.</param>
        <param name="finish2">The end index of the second dimension.</param>
        <param name="start3">The start index of the third dimension.</param>
        <param name="finish3">The end index of the third dimension.</param>
        <param name="source">The source array.</param>
        <summary>Sets a slice of an array</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetArraySlice4D&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void SetArraySlice4D&lt;T&gt; (T[,,,] target, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; start1, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; finish1, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; start2, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; finish2, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; start3, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; finish3, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; start4, Microsoft.FSharp.Core.FSharpOption&lt;int&gt; finish4, T[,,,] source);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetArraySlice4D&lt;T&gt;(!!T[,,,] target, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; start1, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; finish1, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; start2, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; finish2, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; start3, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; finish3, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; start4, class Microsoft.FSharp.Core.FSharpOption`1&lt;int32&gt; finish4, !!T[,,,] source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SetArraySlice4D``1(``0[0:,0:,0:,0:],Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},``0[0:,0:,0:,0:])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetArraySlice4D(Of T) (target As T(,,,), start1 As FSharpOption(Of Integer), finish1 As FSharpOption(Of Integer), start2 As FSharpOption(Of Integer), finish2 As FSharpOption(Of Integer), start3 As FSharpOption(Of Integer), finish3 As FSharpOption(Of Integer), start4 As FSharpOption(Of Integer), finish4 As FSharpOption(Of Integer), source As T(,,,))" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SetArraySlice4D : 'T[,,,] -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; option&lt;int&gt; -&gt; 'T[,,,] -&gt; unit" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SetArraySlice4D target start1 finish1 start2 finish2 start3 finish3 start4 finish4 source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T[,,,]" />
        <Parameter Name="start1" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="finish1" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="start2" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="finish2" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="start3" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="finish3" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="start4" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="finish4" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Int32&gt;" />
        <Parameter Name="source" Type="T[,,,]" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="target">The target array.</param>
        <param name="start1">The start index of the first dimension.</param>
        <param name="finish1">The end index of the first dimension.</param>
        <param name="start2">The start index of the second dimension.</param>
        <param name="finish2">The end index of the second dimension.</param>
        <param name="start3">The start index of the third dimension.</param>
        <param name="finish3">The end index of the third dimension.</param>
        <param name="start4">The start index of the fourth dimension.</param>
        <param name="finish4">The end index of the fourth dimension.</param>
        <param name="source">The source array.</param>
        <summary>Sets a slice of an array</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignDynamic&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int SignDynamic&lt;T&gt; (T x);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 SignDynamic&lt;T&gt;(!!T x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SignDynamic``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignDynamic(Of T) (x As T) As Integer" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SignDynamic : 'T -&gt; int" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SignDynamic x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="x">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SinDynamic&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T SinDynamic&lt;T&gt; (T x);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T SinDynamic&lt;T&gt;(!!T x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SinDynamic``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SinDynamic(Of T) (x As T) As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SinDynamic : 'T -&gt; 'T" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SinDynamic x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="x">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SinhDynamic&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T SinhDynamic&lt;T&gt; (T x);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T SinhDynamic&lt;T&gt;(!!T x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SinhDynamic``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SinhDynamic(Of T) (x As T) As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SinhDynamic : 'T -&gt; 'T" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SinhDynamic x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="x">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SqrtDynamic&lt;T1,T2&gt;">
      <MemberSignature Language="C#" Value="public static T2 SqrtDynamic&lt;T1,T2&gt; (T1 x);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T2 SqrtDynamic&lt;T1, T2&gt;(!!T1 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SqrtDynamic``2(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SqrtDynamic(Of T1, T2) (x As T1) As T2" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SqrtDynamic : 'T1 -&gt; 'T2" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SqrtDynamic x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T2</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="T1" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <param name="x">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TanDynamic&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T TanDynamic&lt;T&gt; (T x);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T TanDynamic&lt;T&gt;(!!T x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.TanDynamic``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TanDynamic(Of T) (x As T) As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.TanDynamic : 'T -&gt; 'T" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.TanDynamic x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="x">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TanhDynamic&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T TanhDynamic&lt;T&gt; (T x);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T TanhDynamic&lt;T&gt;(!!T x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.TanhDynamic``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TanhDynamic(Of T) (x As T) As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.TanhDynamic : 'T -&gt; 'T" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.TanhDynamic x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="x">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TruncateDynamic&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T TruncateDynamic&lt;T&gt; (T x);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T TruncateDynamic&lt;T&gt;(!!T x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.TruncateDynamic``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TruncateDynamic(Of T) (x As T) As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.TruncateDynamic : 'T -&gt; 'T" Usage="Microsoft.FSharp.Core.Operators.OperatorIntrinsics.TruncateDynamic x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="x">To be added.</param>
        <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>