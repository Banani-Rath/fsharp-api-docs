<Type Name="PrintfModule" FullName="Microsoft.FSharp.Core.PrintfModule">
  <TypeSignature Language="C#" Value="public static class PrintfModule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed PrintfModule extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.FSharp.Core.PrintfModule" />
  <AssemblyInfo>
    <AssemblyName>FSharp.Core</AssemblyName>
    <AssemblyVersion>4.4.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.Module)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.CompilationRepresentation(Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Extensible printf-style formatting for numbers and other datatypes</summary>
    <remarks>Format specifications are strings with "%" markers indicating format 
 placeholders. Format placeholders consist of:
  <c>
    %[flags][width][.precision][type]
  </c>
 where the type is interpreted as follows:
  <c>
     %b:         bool, formatted as "true" or "false"
     %s:         string, formatted as its unescaped contents
     %c:         character literal
     %d, %i:     any basic integer type formatted as a decimal integer, signed if the basic integer type is signed.
     %u:         any basic integer type formatted as an unsigned decimal integer
     %x, %X, %o: any basic integer type formatted as an unsigned hexadecimal 
                 (a-f)/Hexadecimal (A-F)/Octal integer
 
     %e, %E, %f, %F, %g, %G: 
                 any basic floating point type (float,float32) formatted
                 using a C-style floating point format specifications, i.e
 
     %e, %E: Signed value having the form [-]d.dddde[sign]ddd where 
                 d is a single decimal digit, dddd is one or more decimal
                 digits, ddd is exactly three decimal digits, and sign 
                 is + or -
 
     %f:     Signed value having the form [-]dddd.dddd, where dddd is one
                 or more decimal digits. The number of digits before the 
                 decimal point depends on the magnitude of the number, and 
                 the number of digits after the decimal point depends on 
                 the requested precision.
 
     %g, %G: Signed value printed in f or e format, whichever is 
                 more compact for the given value and precision.
 
 
    %M:      System.Decimal value
 
    %O:      Any value, printed by boxing the object and using it's ToString method(s)
 
    %A:      Any value, printed with the default layout settings 
 
    %a:      A general format specifier, requires two arguments:
                 (1) a function which accepts two arguments:
                     (a) a context parameter of the appropriate type for the
                         given formatting function (e.g. an #System.IO.TextWriter)
                     (b) a value to print
                         and which either outputs or returns appropriate text.
 
                 (2) the particular value to print
 
 
    %t:      A general format specifier, requires one argument:
                 (1) a function which accepts a context parameter of the
                     appropriate type for the given formatting function (e.g. 
                     an System.IO.TextWriter)and which either outputs or returns 
                     appropriate text.

  Basic integer types are:
     byte,sbyte,int16,uint16,int32,uint32,int64,uint64,nativeint,unativeint
  Basic floating point types are:
     float, float32
 </c>
 The optional width is an integer indicating the minimal width of the
 result. For instance, %6d prints an integer, prefixing it with spaces
 to fill at least 6 characters. If width is '*', then an extra integer
 argument is taken to specify the corresponding width.
 <c>
     any number
     '*': 
 </c>
 Valid flags are:
 <c>
     0: add zeros instead of spaces to make up the required width
     '-': left justify the result within the width specified
     '+': add a '+' character if the number is positive (to match a '-' sign 
          for negatives)
     ' ': add an extra space if the number is positive (to match a '-' 
              sign for negatives)
 </c>
 The printf '#' flag is invalid and a compile-time error will be reported if it is used.</remarks>
  </Docs>
  <Members>
    <Member MemberName="PrintFormat&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T PrintFormat&lt;T&gt; (Microsoft.FSharp.Core.PrintfFormat&lt;T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt; format);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T PrintFormat&lt;T&gt;(class Microsoft.FSharp.Core.PrintfFormat`4&lt;!!T, class System.IO.TextWriter, class Microsoft.FSharp.Core.Unit, class Microsoft.FSharp.Core.Unit&gt; format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.PrintfModule.PrintFormat``1(Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("printf")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="format" Type="Microsoft.FSharp.Core.PrintfFormat&lt;T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="format">The input formatter.</param>
        <summary>Formatted printing to stdout</summary>
        <returns>The return type and arguments of the formatter.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintFormatLine&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T PrintFormatLine&lt;T&gt; (Microsoft.FSharp.Core.PrintfFormat&lt;T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt; format);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T PrintFormatLine&lt;T&gt;(class Microsoft.FSharp.Core.PrintfFormat`4&lt;!!T, class System.IO.TextWriter, class Microsoft.FSharp.Core.Unit, class Microsoft.FSharp.Core.Unit&gt; format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatLine``1(Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("printfn")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="format" Type="Microsoft.FSharp.Core.PrintfFormat&lt;T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="format">The input formatter.</param>
        <summary>Formatted printing to stdout, adding a newline.</summary>
        <returns>The return type and arguments of the formatter.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintFormatLineToError&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T PrintFormatLineToError&lt;T&gt; (Microsoft.FSharp.Core.PrintfFormat&lt;T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt; format);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T PrintFormatLineToError&lt;T&gt;(class Microsoft.FSharp.Core.PrintfFormat`4&lt;!!T, class System.IO.TextWriter, class Microsoft.FSharp.Core.Unit, class Microsoft.FSharp.Core.Unit&gt; format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatLineToError``1(Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("eprintfn")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="format" Type="Microsoft.FSharp.Core.PrintfFormat&lt;T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="format">The input formatter.</param>
        <summary>Formatted printing to stderr, adding a newline </summary>
        <returns>The return type and arguments of the formatter.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintFormatLineToTextWriter&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T PrintFormatLineToTextWriter&lt;T&gt; (System.IO.TextWriter textWriter, Microsoft.FSharp.Core.PrintfFormat&lt;T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt; format);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T PrintFormatLineToTextWriter&lt;T&gt;(class System.IO.TextWriter textWriter, class Microsoft.FSharp.Core.PrintfFormat`4&lt;!!T, class System.IO.TextWriter, class Microsoft.FSharp.Core.Unit, class Microsoft.FSharp.Core.Unit&gt; format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatLineToTextWriter``1(System.IO.TextWriter,Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("fprintfn")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
        <Parameter Name="format" Type="Microsoft.FSharp.Core.PrintfFormat&lt;T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="textWriter">The TextWriter to print to.</param>
        <param name="format">The input formatter.</param>
        <summary>Print to a text writer, adding a newline</summary>
        <returns>The return type and arguments of the formatter.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintFormatThen&lt;TResult,T&gt;">
      <MemberSignature Language="C#" Value="public static T PrintFormatThen&lt;TResult,T&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;string,TResult&gt; continuation, Microsoft.FSharp.Core.PrintfFormat&lt;T,Microsoft.FSharp.Core.Unit,string,TResult&gt; format);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T PrintFormatThen&lt;TResult, T&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;string, !!TResult&gt; continuation, class Microsoft.FSharp.Core.PrintfFormat`4&lt;!!T, class Microsoft.FSharp.Core.Unit, string, !!TResult&gt; format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatThen``2(Microsoft.FSharp.Core.FSharpFunc{System.String,``0},Microsoft.FSharp.Core.PrintfFormat{``1,Microsoft.FSharp.Core.Unit,System.String,``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("kprintf")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuation" Type="Microsoft.FSharp.Core.FSharpFunc&lt;System.String,TResult&gt;" />
        <Parameter Name="format" Type="Microsoft.FSharp.Core.PrintfFormat&lt;T,Microsoft.FSharp.Core.Unit,System.String,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <param name="continuation">The function called after formatting to generate the format result.</param>
        <param name="format">The input formatter.</param>
        <summary>printf, but call the given 'final' function to generate the result.
 For example, these let the printing force a flush after all output has 
 been entered onto the channel, but not before. </summary>
        <returns>The arguments of the formatter.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintFormatToError&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T PrintFormatToError&lt;T&gt; (Microsoft.FSharp.Core.PrintfFormat&lt;T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt; format);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T PrintFormatToError&lt;T&gt;(class Microsoft.FSharp.Core.PrintfFormat`4&lt;!!T, class System.IO.TextWriter, class Microsoft.FSharp.Core.Unit, class Microsoft.FSharp.Core.Unit&gt; format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatToError``1(Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("eprintf")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="format" Type="Microsoft.FSharp.Core.PrintfFormat&lt;T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="format">The input formatter.</param>
        <summary>Formatted printing to stderr</summary>
        <returns>The return type and arguments of the formatter.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintFormatToStringBuilder&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T PrintFormatToStringBuilder&lt;T&gt; (System.Text.StringBuilder builder, Microsoft.FSharp.Core.PrintfFormat&lt;T,System.Text.StringBuilder,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt; format);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T PrintFormatToStringBuilder&lt;T&gt;(class System.Text.StringBuilder builder, class Microsoft.FSharp.Core.PrintfFormat`4&lt;!!T, class System.Text.StringBuilder, class Microsoft.FSharp.Core.Unit, class Microsoft.FSharp.Core.Unit&gt; format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatToStringBuilder``1(System.Text.StringBuilder,Microsoft.FSharp.Core.PrintfFormat{``0,System.Text.StringBuilder,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("bprintf")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="System.Text.StringBuilder" />
        <Parameter Name="format" Type="Microsoft.FSharp.Core.PrintfFormat&lt;T,System.Text.StringBuilder,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="builder">The StringBuilder to print to.</param>
        <param name="format">The input formatter.</param>
        <summary>Print to a <c>System.Text.StringBuilder</c></summary>
        <returns>The return type and arguments of the formatter.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintFormatToStringBuilderThen&lt;TResult,T&gt;">
      <MemberSignature Language="C#" Value="public static T PrintFormatToStringBuilderThen&lt;TResult,T&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;Microsoft.FSharp.Core.Unit,TResult&gt; continuation, System.Text.StringBuilder builder, Microsoft.FSharp.Core.PrintfFormat&lt;T,System.Text.StringBuilder,Microsoft.FSharp.Core.Unit,TResult&gt; format);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T PrintFormatToStringBuilderThen&lt;TResult, T&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;class Microsoft.FSharp.Core.Unit, !!TResult&gt; continuation, class System.Text.StringBuilder builder, class Microsoft.FSharp.Core.PrintfFormat`4&lt;!!T, class System.Text.StringBuilder, class Microsoft.FSharp.Core.Unit, !!TResult&gt; format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatToStringBuilderThen``2(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},System.Text.StringBuilder,Microsoft.FSharp.Core.PrintfFormat{``1,System.Text.StringBuilder,Microsoft.FSharp.Core.Unit,``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("kbprintf")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuation" Type="Microsoft.FSharp.Core.FSharpFunc&lt;Microsoft.FSharp.Core.Unit,TResult&gt;" />
        <Parameter Name="builder" Type="System.Text.StringBuilder" />
        <Parameter Name="format" Type="Microsoft.FSharp.Core.PrintfFormat&lt;T,System.Text.StringBuilder,Microsoft.FSharp.Core.Unit,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <param name="continuation">The function called after formatting to generate the format result.</param>
        <param name="builder">The input StringBuilder.</param>
        <param name="format">The input formatter.</param>
        <summary>bprintf, but call the given 'final' function to generate the result.
 See <c>kprintf</c>.</summary>
        <returns>The arguments of the formatter.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintFormatToStringThen&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T PrintFormatToStringThen&lt;T&gt; (Microsoft.FSharp.Core.PrintfFormat&lt;T,Microsoft.FSharp.Core.Unit,string,string&gt; format);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T PrintFormatToStringThen&lt;T&gt;(class Microsoft.FSharp.Core.PrintfFormat`4&lt;!!T, class Microsoft.FSharp.Core.Unit, string, string&gt; format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatToStringThen``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,System.String})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("sprintf")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="format" Type="Microsoft.FSharp.Core.PrintfFormat&lt;T,Microsoft.FSharp.Core.Unit,System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="format">The input formatter.</param>
        <summary>Print to a string via an internal string buffer and return 
 the result as a string. Helper printers must return strings.</summary>
        <returns>The formatted string.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintFormatToStringThen&lt;TResult,T&gt;">
      <MemberSignature Language="C#" Value="public static T PrintFormatToStringThen&lt;TResult,T&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;string,TResult&gt; continuation, Microsoft.FSharp.Core.PrintfFormat&lt;T,Microsoft.FSharp.Core.Unit,string,TResult&gt; format);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T PrintFormatToStringThen&lt;TResult, T&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;string, !!TResult&gt; continuation, class Microsoft.FSharp.Core.PrintfFormat`4&lt;!!T, class Microsoft.FSharp.Core.Unit, string, !!TResult&gt; format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatToStringThen``2(Microsoft.FSharp.Core.FSharpFunc{System.String,``0},Microsoft.FSharp.Core.PrintfFormat{``1,Microsoft.FSharp.Core.Unit,System.String,``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("ksprintf")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuation" Type="Microsoft.FSharp.Core.FSharpFunc&lt;System.String,TResult&gt;" />
        <Parameter Name="format" Type="Microsoft.FSharp.Core.PrintfFormat&lt;T,Microsoft.FSharp.Core.Unit,System.String,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <param name="continuation">The function called to generate a result from the formatted string.</param>
        <param name="format">The input formatter.</param>
        <summary>sprintf, but call the given 'final' function to generate the result.
 See <c>kprintf</c>.</summary>
        <returns>The arguments of the formatter.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintFormatToStringThenFail&lt;T,TResult&gt;">
      <MemberSignature Language="C#" Value="public static T PrintFormatToStringThenFail&lt;T,TResult&gt; (Microsoft.FSharp.Core.PrintfFormat&lt;T,Microsoft.FSharp.Core.Unit,string,TResult&gt; format);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T PrintFormatToStringThenFail&lt;T, TResult&gt;(class Microsoft.FSharp.Core.PrintfFormat`4&lt;!!T, class Microsoft.FSharp.Core.Unit, string, !!TResult&gt; format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatToStringThenFail``2(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,``1})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("failwithf")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="format" Type="Microsoft.FSharp.Core.PrintfFormat&lt;T,Microsoft.FSharp.Core.Unit,System.String,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="format">The input formatter.</param>
        <summary>Print to a string buffer and raise an exception with the given
 result. Helper printers must return strings.</summary>
        <returns>The arguments of the formatter.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintFormatToTextWriter&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T PrintFormatToTextWriter&lt;T&gt; (System.IO.TextWriter textWriter, Microsoft.FSharp.Core.PrintfFormat&lt;T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt; format);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T PrintFormatToTextWriter&lt;T&gt;(class System.IO.TextWriter textWriter, class Microsoft.FSharp.Core.PrintfFormat`4&lt;!!T, class System.IO.TextWriter, class Microsoft.FSharp.Core.Unit, class Microsoft.FSharp.Core.Unit&gt; format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatToTextWriter``1(System.IO.TextWriter,Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("fprintf")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
        <Parameter Name="format" Type="Microsoft.FSharp.Core.PrintfFormat&lt;T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="textWriter">The TextWriter to print to.</param>
        <param name="format">The input formatter.</param>
        <summary>Print to a text writer.</summary>
        <returns>The return type and arguments of the formatter.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintFormatToTextWriterThen&lt;TResult,T&gt;">
      <MemberSignature Language="C#" Value="public static T PrintFormatToTextWriterThen&lt;TResult,T&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;Microsoft.FSharp.Core.Unit,TResult&gt; continuation, System.IO.TextWriter textWriter, Microsoft.FSharp.Core.PrintfFormat&lt;T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,TResult&gt; format);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T PrintFormatToTextWriterThen&lt;TResult, T&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;class Microsoft.FSharp.Core.Unit, !!TResult&gt; continuation, class System.IO.TextWriter textWriter, class Microsoft.FSharp.Core.PrintfFormat`4&lt;!!T, class System.IO.TextWriter, class Microsoft.FSharp.Core.Unit, !!TResult&gt; format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatToTextWriterThen``2(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},System.IO.TextWriter,Microsoft.FSharp.Core.PrintfFormat{``1,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("kfprintf")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuation" Type="Microsoft.FSharp.Core.FSharpFunc&lt;Microsoft.FSharp.Core.Unit,TResult&gt;" />
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
        <Parameter Name="format" Type="Microsoft.FSharp.Core.PrintfFormat&lt;T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <param name="continuation">The function called after formatting to generate the format result.</param>
        <param name="textWriter">The input TextWriter.</param>
        <param name="format">The input formatter.</param>
        <summary>fprintf, but call the given 'final' function to generate the result.
 See <c>kprintf</c>.</summary>
        <returns>The arguments of the formatter.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
