<Type Name="StringModule" FullName="Microsoft.FSharp.Core.StringModule">
  <TypeSignature Language="C#" Value="public static class StringModule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed StringModule extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.FSharp.Core.StringModule" />
  <AssemblyInfo>
    <AssemblyName>FSharp.Core</AssemblyName>
    <AssemblyVersion>4.4.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.Module)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.CompilationRepresentation(Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.RequireQualifiedAccess</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Functional programming operators for string processing.  Further string operations
 are available via the member functions on strings and other functionality in
  <a href="http://msdn2.microsoft.com/en-us/library/system.string.aspx">System.String</a> 
 and <a href="http://msdn2.microsoft.com/library/system.text.regularexpressions.aspx">System.Text.RegularExpressions</a> types.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static string Collect (Microsoft.FSharp.Core.FSharpFunc&lt;char,string&gt; mapping, string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Collect(class Microsoft.FSharp.Core.FSharpFunc`2&lt;char, string&gt; mapping, string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.StringModule.Collect(Microsoft.FSharp.Core.FSharpFunc{System.Char,System.String},System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("collect")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapping" Type="Microsoft.FSharp.Core.FSharpFunc&lt;System.Char,System.String&gt;" />
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="mapping">The function to produce a string from each character of the input string.</param>
        <param name="str">The input string.</param>
        <summary>Builds a new string whose characters are the results of applying the function <c>mapping</c>
 to each of the characters of the input string and concatenating the resulting
 strings.</summary>
        <returns>The concatenated string.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (string sep, System.Collections.Generic.IEnumerable&lt;string&gt; strings);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Concat(string sep, class System.Collections.Generic.IEnumerable`1&lt;string&gt; strings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.StringModule.Concat(System.String,System.Collections.Generic.IEnumerable{System.String})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("concat")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sep" Type="System.String" />
        <Parameter Name="strings" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="sep">The separator string to be inserted between the strings
 of the input sequence.</param>
        <param name="strings">The sequence of strings to be concatenated.</param>
        <summary>Returns a new string made by concatenating the given strings
 with separator <c>sep</c>, that is <c>a1 + sep + ... + sep + aN</c>.</summary>
        <returns>A new string consisting of the concatenated strings separated by
 the separation string.</returns>
        <remarks>To be added.</remarks>
        <exception cref="System.ArgumentNullException">Thrown when <c>strings</c> is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public static bool Exists (Microsoft.FSharp.Core.FSharpFunc&lt;char,bool&gt; predicate, string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool Exists(class Microsoft.FSharp.Core.FSharpFunc`2&lt;char, bool&gt; predicate, string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.StringModule.Exists(Microsoft.FSharp.Core.FSharpFunc{System.Char,System.Boolean},System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("exists")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="Microsoft.FSharp.Core.FSharpFunc&lt;System.Char,System.Boolean&gt;" />
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="predicate">The function to test each character of the string.</param>
        <param name="str">The input string.</param>
        <summary>Tests if any character of the string satisfies the given predicate.</summary>
        <returns>True if any character returns true for the predicate and false otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string Filter (Microsoft.FSharp.Core.FSharpFunc&lt;char,bool&gt; predicate, string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Filter(class Microsoft.FSharp.Core.FSharpFunc`2&lt;char, bool&gt; predicate, string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.StringModule.Filter(Microsoft.FSharp.Core.FSharpFunc{System.Char,System.Boolean},System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("filter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="Microsoft.FSharp.Core.FSharpFunc&lt;System.Char,System.Boolean&gt;" />
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="predicate">A function to test whether each character in the input sequence should be included in the output string.</param>
        <param name="str">The input string.</param>
        <summary>Builds a new string containing only the characters of the input string
 for which the given predicate returns "true".</summary>
        <returns>The resulting string.</returns>
        <remarks>Returns an empty string if the input string is null</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForAll">
      <MemberSignature Language="C#" Value="public static bool ForAll (Microsoft.FSharp.Core.FSharpFunc&lt;char,bool&gt; predicate, string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool ForAll(class Microsoft.FSharp.Core.FSharpFunc`2&lt;char, bool&gt; predicate, string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.StringModule.ForAll(Microsoft.FSharp.Core.FSharpFunc{System.Char,System.Boolean},System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("forall")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="Microsoft.FSharp.Core.FSharpFunc&lt;System.Char,System.Boolean&gt;" />
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="predicate">The function to test each character of the string.</param>
        <param name="str">The input string.</param>
        <summary>Tests if all characters in the string satisfy the given predicate.</summary>
        <returns>True if all characters return true for the predicate and false otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public static string Initialize (int count, Microsoft.FSharp.Core.FSharpFunc&lt;int,string&gt; initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Initialize(int32 count, class Microsoft.FSharp.Core.FSharpFunc`2&lt;int32, string&gt; initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.StringModule.Initialize(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.String})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("init")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="initializer" Type="Microsoft.FSharp.Core.FSharpFunc&lt;System.Int32,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="count">The number of strings to initialize.</param>
        <param name="initializer">The function to take an index and produce a string to
 be concatenated with the others.</param>
        <summary>Builds a new string whose characters are the results of applying the function <c>mapping</c>
 to each index from <c>0</c> to <c>count-1</c> and concatenating the resulting
 strings.</summary>
        <returns>The constructed string.</returns>
        <remarks>To be added.</remarks>
        <exception cref="System.ArgumentException">Thrown when <c>count</c> is negative.</exception>
      </Docs>
    </Member>
    <Member MemberName="Iterate">
      <MemberSignature Language="C#" Value="public static void Iterate (Microsoft.FSharp.Core.FSharpFunc&lt;char,Microsoft.FSharp.Core.Unit&gt; action, string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Iterate(class Microsoft.FSharp.Core.FSharpFunc`2&lt;char, class Microsoft.FSharp.Core.Unit&gt; action, string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.StringModule.Iterate(Microsoft.FSharp.Core.FSharpFunc{System.Char,Microsoft.FSharp.Core.Unit},System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("iter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Microsoft.FSharp.Core.FSharpFunc&lt;System.Char,Microsoft.FSharp.Core.Unit&gt;" />
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="action">The function to be applied to each character of the string.</param>
        <param name="str">The input string.</param>
        <summary>Applies the function <c>action</c> to each character in the string.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IterateIndexed">
      <MemberSignature Language="C#" Value="public static void IterateIndexed (Microsoft.FSharp.Core.FSharpFunc&lt;int,Microsoft.FSharp.Core.FSharpFunc&lt;char,Microsoft.FSharp.Core.Unit&gt;&gt; action, string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static void IterateIndexed(class Microsoft.FSharp.Core.FSharpFunc`2&lt;int32, class Microsoft.FSharp.Core.FSharpFunc`2&lt;char, class Microsoft.FSharp.Core.Unit&gt;&gt; action, string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.StringModule.IterateIndexed(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Char,Microsoft.FSharp.Core.Unit}},System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("iteri")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Microsoft.FSharp.Core.FSharpFunc&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc&lt;System.Char,Microsoft.FSharp.Core.Unit&gt;&gt;" />
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="action">The function to apply to each character and index of the string.</param>
        <param name="str">The input string.</param>
        <summary>Applies the function <c>action</c> to the index of each character in the string and the
 character itself.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public static int Length (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Length(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.StringModule.Length(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("length")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">The input string.</param>
        <summary>Returns the length of the string.</summary>
        <returns>The number of characters in the string.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Map">
      <MemberSignature Language="C#" Value="public static string Map (Microsoft.FSharp.Core.FSharpFunc&lt;char,char&gt; mapping, string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Map(class Microsoft.FSharp.Core.FSharpFunc`2&lt;char, char&gt; mapping, string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.StringModule.Map(Microsoft.FSharp.Core.FSharpFunc{System.Char,System.Char},System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("map")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapping" Type="Microsoft.FSharp.Core.FSharpFunc&lt;System.Char,System.Char&gt;" />
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="mapping">The function to apply to the characters of the string.</param>
        <param name="str">The input string.</param>
        <summary>Builds a new string whose characters are the results of applying the function <c>mapping</c>
 to each of the characters of the input string.</summary>
        <returns>The resulting string.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapIndexed">
      <MemberSignature Language="C#" Value="public static string MapIndexed (Microsoft.FSharp.Core.FSharpFunc&lt;int,Microsoft.FSharp.Core.FSharpFunc&lt;char,char&gt;&gt; mapping, string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string MapIndexed(class Microsoft.FSharp.Core.FSharpFunc`2&lt;int32, class Microsoft.FSharp.Core.FSharpFunc`2&lt;char, char&gt;&gt; mapping, string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.StringModule.MapIndexed(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Char,System.Char}},System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("mapi")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapping" Type="Microsoft.FSharp.Core.FSharpFunc&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc&lt;System.Char,System.Char&gt;&gt;" />
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="mapping">The function to apply to each character and index of the string.</param>
        <param name="str">The input string.</param>
        <summary>Builds a new string whose characters are the results of applying the function <c>mapping</c>
 to each character and index of the input string.</summary>
        <returns>The resulting string.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Replicate">
      <MemberSignature Language="C#" Value="public static string Replicate (int count, string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replicate(int32 count, string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.StringModule.Replicate(System.Int32,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("replicate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="count">The number of copies of the input string will be copied.</param>
        <param name="str">The input string.</param>
        <summary>Returns a string by concatenating <c>count</c> instances of <c>str</c>.</summary>
        <returns>The concatenated string.</returns>
        <remarks>To be added.</remarks>
        <exception cref="System.ArgumentException">Thrown when <c>count</c> is negative.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
