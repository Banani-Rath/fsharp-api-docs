<Type Name="LanguagePrimitives" FullName="Microsoft.FSharp.Core.LanguagePrimitives">
  <TypeSignature Language="C#" Value="public static class LanguagePrimitives" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed LanguagePrimitives extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.FSharp.Core.LanguagePrimitives" />
  <TypeSignature Language="VB.NET" Value="Public Class LanguagePrimitives" />
  <TypeSignature Language="F#" Value="module LanguagePrimitives" />
  <AssemblyInfo>
    <AssemblyName>FSharp.Core</AssemblyName>
    <AssemblyVersion>4.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.Module)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Language primitives associated with the F# language</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AdditionDynamic&lt;T1,T2,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult AdditionDynamic&lt;T1,T2,TResult&gt; (T1 x, T2 y);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TResult AdditionDynamic&lt;T1, T2, TResult&gt;(!!T1 x, !!T2 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.AdditionDynamic``3(``0,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AdditionDynamic(Of T1, T2, TResult) (x As T1, y As T2) As TResult" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.AdditionDynamic : 'T1 -&gt; 'T2 -&gt; 'Result" Usage="Microsoft.FSharp.Core.LanguagePrimitives.AdditionDynamic x y" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by dynamic invocations of F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="T1" />
        <Parameter Name="y" Type="T2" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>A compiler intrinsic that implements dynamic invocations to the '+' operator.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckedAdditionDynamic&lt;T1,T2,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult CheckedAdditionDynamic&lt;T1,T2,TResult&gt; (T1 x, T2 y);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TResult CheckedAdditionDynamic&lt;T1, T2, TResult&gt;(!!T1 x, !!T2 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.CheckedAdditionDynamic``3(``0,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CheckedAdditionDynamic(Of T1, T2, TResult) (x As T1, y As T2) As TResult" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.CheckedAdditionDynamic : 'T1 -&gt; 'T2 -&gt; 'Result" Usage="Microsoft.FSharp.Core.LanguagePrimitives.CheckedAdditionDynamic x y" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by dynamic invocations of F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="T1" />
        <Parameter Name="y" Type="T2" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>A compiler intrinsic that implements dynamic invocations to the checked '+' operator.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckedMultiplyDynamic&lt;T1,T2,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult CheckedMultiplyDynamic&lt;T1,T2,TResult&gt; (T1 x, T2 y);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TResult CheckedMultiplyDynamic&lt;T1, T2, TResult&gt;(!!T1 x, !!T2 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.CheckedMultiplyDynamic``3(``0,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CheckedMultiplyDynamic(Of T1, T2, TResult) (x As T1, y As T2) As TResult" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.CheckedMultiplyDynamic : 'T1 -&gt; 'T2 -&gt; 'Result" Usage="Microsoft.FSharp.Core.LanguagePrimitives.CheckedMultiplyDynamic x y" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by dynamic invocations of F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="T1" />
        <Parameter Name="y" Type="T2" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>A compiler intrinsic that implements dynamic invocations to the checked '*' operator.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecimalWithMeasure">
      <MemberSignature Language="C#" Value="public static decimal DecimalWithMeasure (decimal f);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal DecimalWithMeasure(valuetype System.Decimal f) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.DecimalWithMeasure(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DecimalWithMeasure (f As Decimal) As Decimal" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.DecimalWithMeasure : decimal -&gt; decimal" Usage="Microsoft.FSharp.Core.LanguagePrimitives.DecimalWithMeasure f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="f">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DivideByInt&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T DivideByInt&lt;T&gt; (T x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T DivideByInt&lt;T&gt;(!!T x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.DivideByInt``1(``0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivideByInt(Of T) (x As T, y As Integer) As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.DivideByInt : 'T -&gt; int -&gt; 'T" Usage="Microsoft.FSharp.Core.LanguagePrimitives.DivideByInt x y" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="T" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="x">The input value.</param>
        <param name="y">The input int.</param>
        <summary>Divides a value by an integer.</summary>
        <returns>The division result.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DivideByIntDynamic&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T DivideByIntDynamic&lt;T&gt; (T x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T DivideByIntDynamic&lt;T&gt;(!!T x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.DivideByIntDynamic``1(``0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivideByIntDynamic(Of T) (x As T, y As Integer) As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.DivideByIntDynamic : 'T -&gt; int -&gt; 'T" Usage="Microsoft.FSharp.Core.LanguagePrimitives.DivideByIntDynamic x y" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by dynamic invocations of F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="T" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>A compiler intrinsic that implements dynamic invocations for the DivideByInt primitive.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumOfValue&lt;T,TEnum&gt;">
      <MemberSignature Language="C#" Value="public static TEnum EnumOfValue&lt;T,TEnum&gt; (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TEnum EnumOfValue&lt;T, TEnum&gt;(!!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.EnumOfValue``2(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumOfValue(Of T, TEnum) (value As T) As TEnum" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.EnumOfValue : 'T -&gt; 'Enum" Usage="Microsoft.FSharp.Core.LanguagePrimitives.EnumOfValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEnum</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TEnum" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <typeparam name="TEnum">To be added.</typeparam>
        <param name="value">The input value.</param>
        <summary>Build an enum value from an underlying value</summary>
        <returns>The value as an enumeration.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumToValue&lt;TEnum,T&gt;">
      <MemberSignature Language="C#" Value="public static T EnumToValue&lt;TEnum,T&gt; (TEnum enum);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T EnumToValue&lt;TEnum, T&gt;(!!TEnum enum) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.EnumToValue``2(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumToValue(Of TEnum, T) (enum As TEnum) As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.EnumToValue : 'Enum -&gt; 'T" Usage="Microsoft.FSharp.Core.LanguagePrimitives.EnumToValue enum" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="enum" Type="TEnum" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <param name="enum">The input enum.</param>
        <summary>Get the underlying value for an enum value</summary>
        <returns>The enumeration as a value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FastGenericComparer&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IComparer&lt;T&gt; FastGenericComparer&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.Generic.IComparer`1&lt;!!T&gt; FastGenericComparer&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.FastGenericComparer``1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FastGenericComparer(Of T) () As IComparer(Of T)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.FastGenericComparer : unit -&gt; System.Collections.Generic.IComparer&lt;'T&gt;" Usage="Microsoft.FSharp.Core.LanguagePrimitives.FastGenericComparer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IComparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <summary>Make an F# comparer object for the given type</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FastGenericComparerFromTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IComparer&lt;T&gt; FastGenericComparerFromTable&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.Generic.IComparer`1&lt;!!T&gt; FastGenericComparerFromTable&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.FastGenericComparerFromTable``1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FastGenericComparerFromTable(Of T) () As IComparer(Of T)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.FastGenericComparerFromTable : unit -&gt; System.Collections.Generic.IComparer&lt;'T&gt;" Usage="Microsoft.FSharp.Core.LanguagePrimitives.FastGenericComparerFromTable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is a compiler intrinsic should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IComparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <summary>Make an F# comparer object for the given type</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FastGenericEqualityComparer&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEqualityComparer&lt;T&gt; FastGenericEqualityComparer&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.Generic.IEqualityComparer`1&lt;!!T&gt; FastGenericEqualityComparer&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.FastGenericEqualityComparer``1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FastGenericEqualityComparer(Of T) () As IEqualityComparer(Of T)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.FastGenericEqualityComparer : unit -&gt; System.Collections.Generic.IEqualityComparer&lt;'T&gt;" Usage="Microsoft.FSharp.Core.LanguagePrimitives.FastGenericEqualityComparer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEqualityComparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <summary>Make an F# hash/equality object for the given type</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FastGenericEqualityComparerFromTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEqualityComparer&lt;T&gt; FastGenericEqualityComparerFromTable&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.Generic.IEqualityComparer`1&lt;!!T&gt; FastGenericEqualityComparerFromTable&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.FastGenericEqualityComparerFromTable``1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FastGenericEqualityComparerFromTable(Of T) () As IEqualityComparer(Of T)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.FastGenericEqualityComparerFromTable : unit -&gt; System.Collections.Generic.IEqualityComparer&lt;'T&gt;" Usage="Microsoft.FSharp.Core.LanguagePrimitives.FastGenericEqualityComparerFromTable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is a compiler intrinsic should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEqualityComparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <summary>Make an F# hash/equality object for the given type</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FastLimitedGenericEqualityComparer&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEqualityComparer&lt;T&gt; FastLimitedGenericEqualityComparer&lt;T&gt; (int limit);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.Generic.IEqualityComparer`1&lt;!!T&gt; FastLimitedGenericEqualityComparer&lt;T&gt;(int32 limit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.FastLimitedGenericEqualityComparer``1(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FastLimitedGenericEqualityComparer(Of T) (limit As Integer) As IEqualityComparer(Of T)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.FastLimitedGenericEqualityComparer : int -&gt; System.Collections.Generic.IEqualityComparer&lt;'T&gt;" Usage="Microsoft.FSharp.Core.LanguagePrimitives.FastLimitedGenericEqualityComparer limit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEqualityComparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="limit" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="limit">The input limit on the number of nodes.</param>
        <summary>Make an F# hash/equality object for the given type using node-limited hashing when hashing F#
 records, lists and union types.</summary>
        <returns>System.Collections.Generic.IEqualityComparer&lt;'T&gt;</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Float32WithMeasure">
      <MemberSignature Language="C#" Value="public static float Float32WithMeasure (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Float32WithMeasure(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.Float32WithMeasure(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Float32WithMeasure (f As Single) As Single" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.Float32WithMeasure : single -&gt; single" Usage="Microsoft.FSharp.Core.LanguagePrimitives.Float32WithMeasure f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FloatWithMeasure">
      <MemberSignature Language="C#" Value="public static double FloatWithMeasure (double f);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 FloatWithMeasure(float64 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.FloatWithMeasure(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FloatWithMeasure (f As Double) As Double" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.FloatWithMeasure : double -&gt; double" Usage="Microsoft.FSharp.Core.LanguagePrimitives.FloatWithMeasure f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="f">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericComparer">
      <MemberSignature Language="C#" Value="public static System.Collections.IComparer GenericComparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.IComparer GenericComparer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.FSharp.Core.LanguagePrimitives.GenericComparer" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property GenericComparer As IComparer" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.GenericComparer : System.Collections.IComparer" Usage="Microsoft.FSharp.Core.LanguagePrimitives.GenericComparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.Value)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A static F# comparer object</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericComparison&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int GenericComparison&lt;T&gt; (T e1, T e2);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 GenericComparison&lt;T&gt;(!!T e1, !!T e2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericComparison``1(``0,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenericComparison(Of T) (e1 As T, e2 As T) As Integer" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.GenericComparison : 'T -&gt; 'T -&gt; int" Usage="Microsoft.FSharp.Core.LanguagePrimitives.GenericComparison e1 e2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="e1" Type="T" />
        <Parameter Name="e2" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="e1">The first value.</param>
        <param name="e2">The second value.</param>
        <summary>Compare two values </summary>
        <returns>The result of the comparison.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericComparisonWithComparer&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int GenericComparisonWithComparer&lt;T&gt; (System.Collections.IComparer comp, T e1, T e2);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 GenericComparisonWithComparer&lt;T&gt;(class System.Collections.IComparer comp, !!T e1, !!T e2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericComparisonWithComparer``1(System.Collections.IComparer,``0,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenericComparisonWithComparer(Of T) (comp As IComparer, e1 As T, e2 As T) As Integer" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.GenericComparisonWithComparer : System.Collections.IComparer -&gt; 'T -&gt; 'T -&gt; int" Usage="Microsoft.FSharp.Core.LanguagePrimitives.GenericComparisonWithComparer comp e1 e2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="comp" Type="System.Collections.IComparer" />
        <Parameter Name="e1" Type="T" />
        <Parameter Name="e2" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="comp">The function to compare the values.</param>
        <param name="e1">The first value.</param>
        <param name="e2">The second value.</param>
        <summary>Compare two values. May be called as a recursive case from an implementation of System.IComparable to
 ensure consistent NaN comparison semantics.</summary>
        <returns>The result of the comparison.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericEquality&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool GenericEquality&lt;T&gt; (T e1, T e2);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool GenericEquality&lt;T&gt;(!!T e1, !!T e2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericEquality``1(``0,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenericEquality(Of T) (e1 As T, e2 As T) As Boolean" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.GenericEquality : 'T -&gt; 'T -&gt; bool" Usage="Microsoft.FSharp.Core.LanguagePrimitives.GenericEquality e1 e2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="e1" Type="T" />
        <Parameter Name="e2" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="e1">The first value.</param>
        <param name="e2">The second value.</param>
        <summary>Compare two values for equality using partial equivalence relation semantics ([nan] &lt;&gt; [nan])</summary>
        <returns>The result of the comparison.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericEqualityComparer">
      <MemberSignature Language="C#" Value="public static System.Collections.IEqualityComparer GenericEqualityComparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.IEqualityComparer GenericEqualityComparer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityComparer" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property GenericEqualityComparer As IEqualityComparer" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityComparer : System.Collections.IEqualityComparer" Usage="Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityComparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.Value)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEqualityComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return an F# comparer object suitable for hashing and equality. This hashing behaviour
 of the returned comparer is not limited by an overall node count when hashing F#
 records, lists and union types.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericEqualityER&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool GenericEqualityER&lt;T&gt; (T e1, T e2);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool GenericEqualityER&lt;T&gt;(!!T e1, !!T e2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityER``1(``0,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenericEqualityER(Of T) (e1 As T, e2 As T) As Boolean" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityER : 'T -&gt; 'T -&gt; bool" Usage="Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityER e1 e2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="e1" Type="T" />
        <Parameter Name="e2" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="e1">The first value.</param>
        <param name="e2">The second value.</param>
        <summary>Compare two values for equality using equivalence relation semantics ([nan] = [nan])</summary>
        <returns>The result of the comparison.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericEqualityERComparer">
      <MemberSignature Language="C#" Value="public static System.Collections.IEqualityComparer GenericEqualityERComparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.IEqualityComparer GenericEqualityERComparer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityERComparer" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property GenericEqualityERComparer As IEqualityComparer" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityERComparer : System.Collections.IEqualityComparer" Usage="Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityERComparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.Value)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEqualityComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return an F# comparer object suitable for hashing and equality. This hashing behaviour
 of the returned comparer is not limited by an overall node count when hashing F#
 records, lists and union types. This equality comparer has equivalence 
 relation semantics ([nan] = [nan]).</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericEqualityWithComparer&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool GenericEqualityWithComparer&lt;T&gt; (System.Collections.IEqualityComparer comp, T e1, T e2);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool GenericEqualityWithComparer&lt;T&gt;(class System.Collections.IEqualityComparer comp, !!T e1, !!T e2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityWithComparer``1(System.Collections.IEqualityComparer,``0,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenericEqualityWithComparer(Of T) (comp As IEqualityComparer, e1 As T, e2 As T) As Boolean" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityWithComparer : System.Collections.IEqualityComparer -&gt; 'T -&gt; 'T -&gt; bool" Usage="Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityWithComparer comp e1 e2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="comp" Type="System.Collections.IEqualityComparer" />
        <Parameter Name="e1" Type="T" />
        <Parameter Name="e2" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="comp"></param>
        <param name="e1">The first value.</param>
        <param name="e2">The second value.</param>
        <summary>Compare two values for equality</summary>
        <returns>The result of the comparison.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericGreaterOrEqual&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool GenericGreaterOrEqual&lt;T&gt; (T e1, T e2);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool GenericGreaterOrEqual&lt;T&gt;(!!T e1, !!T e2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericGreaterOrEqual``1(``0,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenericGreaterOrEqual(Of T) (e1 As T, e2 As T) As Boolean" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.GenericGreaterOrEqual : 'T -&gt; 'T -&gt; bool" Usage="Microsoft.FSharp.Core.LanguagePrimitives.GenericGreaterOrEqual e1 e2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="e1" Type="T" />
        <Parameter Name="e2" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="e1">The first value.</param>
        <param name="e2">The second value.</param>
        <summary>Compare two values   </summary>
        <returns>The result of the comparison.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericGreaterThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool GenericGreaterThan&lt;T&gt; (T e1, T e2);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool GenericGreaterThan&lt;T&gt;(!!T e1, !!T e2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericGreaterThan``1(``0,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenericGreaterThan(Of T) (e1 As T, e2 As T) As Boolean" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.GenericGreaterThan : 'T -&gt; 'T -&gt; bool" Usage="Microsoft.FSharp.Core.LanguagePrimitives.GenericGreaterThan e1 e2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="e1" Type="T" />
        <Parameter Name="e2" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="e1">The first value.</param>
        <param name="e2">The second value.</param>
        <summary>Compare two values   </summary>
        <returns>The result of the comparison.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericHash&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int GenericHash&lt;T&gt; (T obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 GenericHash&lt;T&gt;(!!T obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericHash``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenericHash(Of T) (obj As T) As Integer" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.GenericHash : 'T -&gt; int" Usage="Microsoft.FSharp.Core.LanguagePrimitives.GenericHash obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="obj" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="obj">The input object.</param>
        <summary>Hash a value according to its structure. This hash is not limited by an overall node count when hashing F#
 records, lists and union types.</summary>
        <returns>The hashed value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericHashWithComparer&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int GenericHashWithComparer&lt;T&gt; (System.Collections.IEqualityComparer comparer, T obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 GenericHashWithComparer&lt;T&gt;(class System.Collections.IEqualityComparer comparer, !!T obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericHashWithComparer``1(System.Collections.IEqualityComparer,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenericHashWithComparer(Of T) (comparer As IEqualityComparer, obj As T) As Integer" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.GenericHashWithComparer : System.Collections.IEqualityComparer -&gt; 'T -&gt; int" Usage="Microsoft.FSharp.Core.LanguagePrimitives.GenericHashWithComparer comparer obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
        <Parameter Name="obj" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="comparer">The comparison function.</param>
        <param name="obj">The input object.</param>
        <summary>Recursively hash a part of a value according to its structure. </summary>
        <returns>The hashed value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericLessOrEqual&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool GenericLessOrEqual&lt;T&gt; (T e1, T e2);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool GenericLessOrEqual&lt;T&gt;(!!T e1, !!T e2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericLessOrEqual``1(``0,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenericLessOrEqual(Of T) (e1 As T, e2 As T) As Boolean" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.GenericLessOrEqual : 'T -&gt; 'T -&gt; bool" Usage="Microsoft.FSharp.Core.LanguagePrimitives.GenericLessOrEqual e1 e2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="e1" Type="T" />
        <Parameter Name="e2" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="e1">The first value.</param>
        <param name="e2">The second value.</param>
        <summary>Compare two values   </summary>
        <returns>The result of the comparison.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericLessThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool GenericLessThan&lt;T&gt; (T e1, T e2);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool GenericLessThan&lt;T&gt;(!!T e1, !!T e2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericLessThan``1(``0,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenericLessThan(Of T) (e1 As T, e2 As T) As Boolean" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.GenericLessThan : 'T -&gt; 'T -&gt; bool" Usage="Microsoft.FSharp.Core.LanguagePrimitives.GenericLessThan e1 e2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="e1" Type="T" />
        <Parameter Name="e2" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="e1">The first value.</param>
        <param name="e2">The second value.</param>
        <summary>Compare two values   </summary>
        <returns>The result of the comparison.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericLimitedHash&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int GenericLimitedHash&lt;T&gt; (int limit, T obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 GenericLimitedHash&lt;T&gt;(int32 limit, !!T obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericLimitedHash``1(System.Int32,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenericLimitedHash(Of T) (limit As Integer, obj As T) As Integer" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.GenericLimitedHash : int -&gt; 'T -&gt; int" Usage="Microsoft.FSharp.Core.LanguagePrimitives.GenericLimitedHash limit obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="limit" Type="System.Int32" />
        <Parameter Name="obj" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="limit">The limit on the number of nodes.</param>
        <param name="obj">The input object.</param>
        <summary>Hash a value according to its structure. Use the given limit to restrict the hash when hashing F#
 records, lists and union types.</summary>
        <returns>The hashed value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericMaximum&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T GenericMaximum&lt;T&gt; (T e1, T e2);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T GenericMaximum&lt;T&gt;(!!T e1, !!T e2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericMaximum``1(``0,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenericMaximum(Of T) (e1 As T, e2 As T) As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.GenericMaximum : 'T -&gt; 'T -&gt; 'T" Usage="Microsoft.FSharp.Core.LanguagePrimitives.GenericMaximum e1 e2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="e1" Type="T" />
        <Parameter Name="e2" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="e1">The first value.</param>
        <param name="e2">The second value.</param>
        <summary>Take the maximum of two values structurally according to the order given by GenericComparison</summary>
        <returns>The maximum value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericMinimum&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T GenericMinimum&lt;T&gt; (T e1, T e2);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T GenericMinimum&lt;T&gt;(!!T e1, !!T e2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericMinimum``1(``0,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenericMinimum(Of T) (e1 As T, e2 As T) As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.GenericMinimum : 'T -&gt; 'T -&gt; 'T" Usage="Microsoft.FSharp.Core.LanguagePrimitives.GenericMinimum e1 e2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="e1" Type="T" />
        <Parameter Name="e2" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="e1">The first value.</param>
        <param name="e2">The second value.</param>
        <summary>Take the minimum of two values structurally according to the order given by GenericComparison</summary>
        <returns>The minimum value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericOne&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T GenericOne&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T GenericOne&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericOne``1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenericOne(Of T) () As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.GenericOne : unit -&gt; 'T" Usage="Microsoft.FSharp.Core.LanguagePrimitives.GenericOne " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <summary>Resolves to the value 'one' for any primitive numeric type or any type with a static member called 'One'</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericOneDynamic&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T GenericOneDynamic&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T GenericOneDynamic&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericOneDynamic``1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenericOneDynamic(Of T) () As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.GenericOneDynamic : unit -&gt; 'T" Usage="Microsoft.FSharp.Core.LanguagePrimitives.GenericOneDynamic " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <summary>Resolves to the value 'one' for any primitive numeric type or any type with a static member called 'One'.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericZero&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T GenericZero&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T GenericZero&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericZero``1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenericZero(Of T) () As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.GenericZero : unit -&gt; 'T" Usage="Microsoft.FSharp.Core.LanguagePrimitives.GenericZero " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <summary>Resolves to the zero value for any primitive numeric type or any type with a static member called 'Zero'</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericZeroDynamic&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T GenericZeroDynamic&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T GenericZeroDynamic&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericZeroDynamic``1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenericZeroDynamic(Of T) () As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.GenericZeroDynamic : unit -&gt; 'T" Usage="Microsoft.FSharp.Core.LanguagePrimitives.GenericZeroDynamic " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <summary>Resolves to the zero value for any primitive numeric type or any type with a static member called 'Zero'.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Int16WithMeasure">
      <MemberSignature Language="C#" Value="public static short Int16WithMeasure (short f);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int16WithMeasure(int16 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.Int16WithMeasure(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Int16WithMeasure (f As Short) As Short" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.Int16WithMeasure : int16 -&gt; int16" Usage="Microsoft.FSharp.Core.LanguagePrimitives.Int16WithMeasure f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="f">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Int32WithMeasure">
      <MemberSignature Language="C#" Value="public static int Int32WithMeasure (int f);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int32WithMeasure(int32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.Int32WithMeasure(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Int32WithMeasure (f As Integer) As Integer" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.Int32WithMeasure : int -&gt; int" Usage="Microsoft.FSharp.Core.LanguagePrimitives.Int32WithMeasure f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="f">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Int64WithMeasure">
      <MemberSignature Language="C#" Value="public static long Int64WithMeasure (long f);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int64WithMeasure(int64 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.Int64WithMeasure(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Int64WithMeasure (f As Long) As Long" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.Int64WithMeasure : int64 -&gt; int64" Usage="Microsoft.FSharp.Core.LanguagePrimitives.Int64WithMeasure f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="f">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyDynamic&lt;T1,T2,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult MultiplyDynamic&lt;T1,T2,TResult&gt; (T1 x, T2 y);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TResult MultiplyDynamic&lt;T1, T2, TResult&gt;(!!T1 x, !!T2 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.MultiplyDynamic``3(``0,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyDynamic(Of T1, T2, TResult) (x As T1, y As T2) As TResult" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.MultiplyDynamic : 'T1 -&gt; 'T2 -&gt; 'Result" Usage="Microsoft.FSharp.Core.LanguagePrimitives.MultiplyDynamic x y" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilerMessage("This function is for use by dynamic invocations of F# code and should not be used directly", 1204, IsHidden=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="T1" />
        <Parameter Name="y" Type="T2" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>A compiler intrinsic that implements dynamic invocations to the '*' operator.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseInt32">
      <MemberSignature Language="C#" Value="public static int ParseInt32 (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 ParseInt32(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.ParseInt32(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseInt32 (s As String) As Integer" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.ParseInt32 : string -&gt; int" Usage="Microsoft.FSharp.Core.LanguagePrimitives.ParseInt32 s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">The input string.</param>
        <summary>Parse an int32 according to the rules used by the overloaded 'int32' conversion operator when applied to strings</summary>
        <returns>The parsed value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseInt64">
      <MemberSignature Language="C#" Value="public static long ParseInt64 (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 ParseInt64(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.ParseInt64(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseInt64 (s As String) As Long" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.ParseInt64 : string -&gt; int64" Usage="Microsoft.FSharp.Core.LanguagePrimitives.ParseInt64 s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">The input string.</param>
        <summary>Parse an int64 according to the rules used by the overloaded 'int64' conversion operator when applied to strings</summary>
        <returns>The parsed value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseUInt32">
      <MemberSignature Language="C#" Value="public static uint ParseUInt32 (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static unsigned int32 ParseUInt32(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.ParseUInt32(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseUInt32 (s As String) As UInteger" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.ParseUInt32 : string -&gt; uint32" Usage="Microsoft.FSharp.Core.LanguagePrimitives.ParseUInt32 s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">The input string.</param>
        <summary>Parse an uint32 according to the rules used by the overloaded 'uint32' conversion operator when applied to strings</summary>
        <returns>The parsed value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseUInt64">
      <MemberSignature Language="C#" Value="public static ulong ParseUInt64 (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static unsigned int64 ParseUInt64(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.ParseUInt64(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseUInt64 (s As String) As ULong" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.ParseUInt64 : string -&gt; uint64" Usage="Microsoft.FSharp.Core.LanguagePrimitives.ParseUInt64 s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">The input string.</param>
        <summary>Parse an uint64 according to the rules used by the overloaded 'uint64' conversion operator when applied to strings</summary>
        <returns>The parsed value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PhysicalEquality&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool PhysicalEquality&lt;T&gt; (T e1, T e2) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static bool PhysicalEquality&lt;class T&gt;(!!T e1, !!T e2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.PhysicalEquality``1(``0,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PhysicalEquality(Of T As Class) (e1 As T, e2 As T) As Boolean" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.PhysicalEquality : 'T -&gt; 'T -&gt; bool (requires 'T : null)" Usage="Microsoft.FSharp.Core.LanguagePrimitives.PhysicalEquality e1 e2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="e1" Type="T" />
        <Parameter Name="e2" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="e1">The first value.</param>
        <param name="e2">The second value.</param>
        <summary>Reference/physical equality. 
 True if the inputs are reference-equal, false otherwise.</summary>
        <returns>The result of the comparison.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PhysicalHash&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int PhysicalHash&lt;T&gt; (T obj) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 PhysicalHash&lt;class T&gt;(!!T obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.PhysicalHash``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PhysicalHash(Of T As Class) (obj As T) As Integer" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.PhysicalHash : 'T -&gt; int (requires 'T : null)" Usage="Microsoft.FSharp.Core.LanguagePrimitives.PhysicalHash obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="obj" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="obj">The input object.</param>
        <summary>The physical hash. Hashes on the object identity, except for value types,
 where we hash on the contents.</summary>
        <returns>The hashed value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SByteWithMeasure">
      <MemberSignature Language="C#" Value="public static sbyte SByteWithMeasure (sbyte f);" />
      <MemberSignature Language="ILAsm" Value=".method public static int8 SByteWithMeasure(int8 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.LanguagePrimitives.SByteWithMeasure(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SByteWithMeasure (f As SByte) As SByte" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Core.LanguagePrimitives.SByteWithMeasure : sbyte -&gt; sbyte" Usage="Microsoft.FSharp.Core.LanguagePrimitives.SByteWithMeasure f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="f">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>