<Type Name="FuncConvert" FullName="Microsoft.FSharp.Core.FuncConvert">
  <TypeSignature Language="C#" Value="public static class FuncConvert" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable sealed FuncConvert extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.FSharp.Core.FuncConvert" />
  <TypeSignature Language="VB.NET" Value="Public Class FuncConvert" />
  <TypeSignature Language="F#" Value="type FuncConvert = class" />
  <AssemblyInfo>
    <AssemblyName>FSharp.Core</AssemblyName>
    <AssemblyVersion>4.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.AbstractClass</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.ObjectType)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.Sealed</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Helper functions for converting F# first class function values to and from CLI representations
 of functions using delegates.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="FromAction">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Core.FSharpFunc&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt; FromAction (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Core.FSharpFunc`2&lt;class Microsoft.FSharp.Core.Unit, class Microsoft.FSharp.Core.Unit&gt; FromAction(class System.Action action) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.FuncConvert.FromAction(System.Action)" />
      <MemberSignature Language="F#" Value="static member FromAction : Action -&gt; (unit -&gt; unit)" Usage="Microsoft.FSharp.Core.FuncConvert.FromAction action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Core.FSharpFunc&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <summary>Convert the given Action delegate object to an F# function value</summary>
        <returns>The F# function.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromAction&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.Unit&gt; FromAction&lt;T&gt; (Action&lt;T&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T, class Microsoft.FSharp.Core.Unit&gt; FromAction&lt;T&gt;(class System.Action`1&lt;!!T&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.FuncConvert.FromAction``1(System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromAction(Of T) (action As Action(Of T)) As FSharpFunc(Of T, Unit)" />
      <MemberSignature Language="F#" Value="static member FromAction : Action&lt;'T&gt; -&gt; ('T -&gt; unit)" Usage="Microsoft.FSharp.Core.FuncConvert.FromAction action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.Unit&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="action">To be added.</param>
        <summary>Convert the given Action delegate object to an F# function value</summary>
        <returns>The F# function.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromAction&lt;T1,T2&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Core.FSharpFunc&lt;T1,Microsoft.FSharp.Core.FSharpFunc&lt;T2,Microsoft.FSharp.Core.Unit&gt;&gt; FromAction&lt;T1,T2&gt; (Action&lt;T1,T2&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T1, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T2, class Microsoft.FSharp.Core.Unit&gt;&gt; FromAction&lt;T1, T2&gt;(class System.Action`2&lt;!!T1, !!T2&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.FuncConvert.FromAction``2(System.Action{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromAction(Of T1, T2) (action As Action(Of T1, T2)) As FSharpFunc(Of T1, FSharpFunc(Of T2, Unit))" />
      <MemberSignature Language="F#" Value="static member FromAction : Action&lt;'T1, 'T2&gt; -&gt; ('T1 -&gt; 'T2 -&gt; unit)" Usage="Microsoft.FSharp.Core.FuncConvert.FromAction action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Core.FSharpFunc&lt;T1,Microsoft.FSharp.Core.FSharpFunc&lt;T2,Microsoft.FSharp.Core.Unit&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;T1,T2&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <param name="action">To be added.</param>
        <summary>Convert the given Action delegate object to an F# function value</summary>
        <returns>The F#funcfunction.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromAction&lt;T1,T2,T3&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Core.FSharpFunc&lt;T1,Microsoft.FSharp.Core.FSharpFunc&lt;T2,Microsoft.FSharp.Core.FSharpFunc&lt;T3,Microsoft.FSharp.Core.Unit&gt;&gt;&gt; FromAction&lt;T1,T2,T3&gt; (Action&lt;T1,T2,T3&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T1, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T2, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T3, class Microsoft.FSharp.Core.Unit&gt;&gt;&gt; FromAction&lt;T1, T2, T3&gt;(class System.Action`3&lt;!!T1, !!T2, !!T3&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.FuncConvert.FromAction``3(System.Action{``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromAction(Of T1, T2, T3) (action As Action(Of T1, T2, T3)) As FSharpFunc(Of T1, FSharpFunc(Of T2, FSharpFunc(Of T3, Unit)))" />
      <MemberSignature Language="F#" Value="static member FromAction : Action&lt;'T1, 'T2, 'T3&gt; -&gt; ('T1 -&gt; 'T2 -&gt; 'T3 -&gt; unit)" Usage="Microsoft.FSharp.Core.FuncConvert.FromAction action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Core.FSharpFunc&lt;T1,Microsoft.FSharp.Core.FSharpFunc&lt;T2,Microsoft.FSharp.Core.FSharpFunc&lt;T3,Microsoft.FSharp.Core.Unit&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;T1,T2,T3&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <param name="action">To be added.</param>
        <summary>Convert the given Action delegate object to an F# function value</summary>
        <returns>The F# function.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromAction&lt;T1,T2,T3,T4&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Core.FSharpFunc&lt;T1,Microsoft.FSharp.Core.FSharpFunc&lt;T2,Microsoft.FSharp.Core.FSharpFunc&lt;T3,Microsoft.FSharp.Core.FSharpFunc&lt;T4,Microsoft.FSharp.Core.Unit&gt;&gt;&gt;&gt; FromAction&lt;T1,T2,T3,T4&gt; (Action&lt;T1,T2,T3,T4&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T1, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T2, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T3, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T4, class Microsoft.FSharp.Core.Unit&gt;&gt;&gt;&gt; FromAction&lt;T1, T2, T3, T4&gt;(class System.Action`4&lt;!!T1, !!T2, !!T3, !!T4&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.FuncConvert.FromAction``4(System.Action{``0,``1,``2,``3})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromAction(Of T1, T2, T3, T4) (action As Action(Of T1, T2, T3, T4)) As FSharpFunc(Of T1, FSharpFunc(Of T2, FSharpFunc(Of T3, FSharpFunc(Of T4, Unit))))" />
      <MemberSignature Language="F#" Value="static member FromAction : Action&lt;'T1, 'T2, 'T3, 'T4&gt; -&gt; ('T1 -&gt; 'T2 -&gt; 'T3 -&gt; 'T4 -&gt; unit)" Usage="Microsoft.FSharp.Core.FuncConvert.FromAction action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Core.FSharpFunc&lt;T1,Microsoft.FSharp.Core.FSharpFunc&lt;T2,Microsoft.FSharp.Core.FSharpFunc&lt;T3,Microsoft.FSharp.Core.FSharpFunc&lt;T4,Microsoft.FSharp.Core.Unit&gt;&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;T1,T2,T3,T4&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <param name="action">To be added.</param>
        <summary>Convert the given Action delegate object to an F# function value</summary>
        <returns>The F# function.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromAction&lt;T1,T2,T3,T4,T5&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Core.FSharpFunc&lt;T1,Microsoft.FSharp.Core.FSharpFunc&lt;T2,Microsoft.FSharp.Core.FSharpFunc&lt;T3,Microsoft.FSharp.Core.FSharpFunc&lt;T4,Microsoft.FSharp.Core.FSharpFunc&lt;T5,Microsoft.FSharp.Core.Unit&gt;&gt;&gt;&gt;&gt; FromAction&lt;T1,T2,T3,T4,T5&gt; (Action&lt;T1,T2,T3,T4,T5&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T1, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T2, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T3, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T4, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T5, class Microsoft.FSharp.Core.Unit&gt;&gt;&gt;&gt;&gt; FromAction&lt;T1, T2, T3, T4, T5&gt;(class System.Action`5&lt;!!T1, !!T2, !!T3, !!T4, !!T5&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.FuncConvert.FromAction``5(System.Action{``0,``1,``2,``3,``4})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromAction(Of T1, T2, T3, T4, T5) (action As Action(Of T1, T2, T3, T4, T5)) As FSharpFunc(Of T1, FSharpFunc(Of T2, FSharpFunc(Of T3, FSharpFunc(Of T4, FSharpFunc(Of T5, Unit)))))" />
      <MemberSignature Language="F#" Value="static member FromAction : Action&lt;'T1, 'T2, 'T3, 'T4, 'T5&gt; -&gt; ('T1 -&gt; 'T2 -&gt; 'T3 -&gt; 'T4 -&gt; 'T5 -&gt; unit)" Usage="Microsoft.FSharp.Core.FuncConvert.FromAction action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Core.FSharpFunc&lt;T1,Microsoft.FSharp.Core.FSharpFunc&lt;T2,Microsoft.FSharp.Core.FSharpFunc&lt;T3,Microsoft.FSharp.Core.FSharpFunc&lt;T4,Microsoft.FSharp.Core.FSharpFunc&lt;T5,Microsoft.FSharp.Core.Unit&gt;&gt;&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;T1,T2,T3,T4,T5&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <param name="action">To be added.</param>
        <summary>Convert the given Action delegate object to an F# function value</summary>
        <returns>The F# function.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromFunc&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Core.FSharpFunc&lt;Microsoft.FSharp.Core.Unit,T&gt; FromFunc&lt;T&gt; (Func&lt;T&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Core.FSharpFunc`2&lt;class Microsoft.FSharp.Core.Unit, !!T&gt; FromFunc&lt;T&gt;(class System.Func`1&lt;!!T&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.FuncConvert.FromFunc``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFunc(Of T) (func As Func(Of T)) As FSharpFunc(Of Unit, T)" />
      <MemberSignature Language="F#" Value="static member FromFunc : Func&lt;'T&gt; -&gt; (unit -&gt; 'T)" Usage="Microsoft.FSharp.Core.FuncConvert.FromFunc func" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Core.FSharpFunc&lt;Microsoft.FSharp.Core.Unit,T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="func" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="func">The input Func delegate.</param>
        <summary>Convert the given Func delegate object to an F# function value</summary>
        <returns>The F# function.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromFunc&lt;T,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Core.FSharpFunc&lt;T,TResult&gt; FromFunc&lt;T,TResult&gt; (Func&lt;T,TResult&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T, !!TResult&gt; FromFunc&lt;T, TResult&gt;(class System.Func`2&lt;!!T, !!TResult&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.FuncConvert.FromFunc``2(System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFunc(Of T, TResult) (func As Func(Of T, TResult)) As FSharpFunc(Of T, TResult)" />
      <MemberSignature Language="F#" Value="static member FromFunc : Func&lt;'T, 'Result&gt; -&gt; ('T -&gt; 'Result)" Usage="Microsoft.FSharp.Core.FuncConvert.FromFunc func" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Core.FSharpFunc&lt;T,TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="func" Type="System.Func&lt;T,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="func">The input Func delegate.</param>
        <summary>Convert the given Func delegate object to an F# function value</summary>
        <returns>The F# function.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromFunc&lt;T1,T2,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Core.FSharpFunc&lt;T1,Microsoft.FSharp.Core.FSharpFunc&lt;T2,TResult&gt;&gt; FromFunc&lt;T1,T2,TResult&gt; (Func&lt;T1,T2,TResult&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T1, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T2, !!TResult&gt;&gt; FromFunc&lt;T1, T2, TResult&gt;(class System.Func`3&lt;!!T1, !!T2, !!TResult&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.FuncConvert.FromFunc``3(System.Func{``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFunc(Of T1, T2, TResult) (func As Func(Of T1, T2, TResult)) As FSharpFunc(Of T1, FSharpFunc(Of T2, TResult))" />
      <MemberSignature Language="F#" Value="static member FromFunc : Func&lt;'T1, 'T2, 'Result&gt; -&gt; ('T1 -&gt; 'T2 -&gt; 'Result)" Usage="Microsoft.FSharp.Core.FuncConvert.FromFunc func" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Core.FSharpFunc&lt;T1,Microsoft.FSharp.Core.FSharpFunc&lt;T2,TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="func" Type="System.Func&lt;T1,T2,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="func">The input Func delegate.</param>
        <summary>Convert the given Func delegate object to an F# function value</summary>
        <returns>The F#funcfunction.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromFunc&lt;T1,T2,T3,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Core.FSharpFunc&lt;T1,Microsoft.FSharp.Core.FSharpFunc&lt;T2,Microsoft.FSharp.Core.FSharpFunc&lt;T3,TResult&gt;&gt;&gt; FromFunc&lt;T1,T2,T3,TResult&gt; (Func&lt;T1,T2,T3,TResult&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T1, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T2, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T3, !!TResult&gt;&gt;&gt; FromFunc&lt;T1, T2, T3, TResult&gt;(class System.Func`4&lt;!!T1, !!T2, !!T3, !!TResult&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.FuncConvert.FromFunc``4(System.Func{``0,``1,``2,``3})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFunc(Of T1, T2, T3, TResult) (func As Func(Of T1, T2, T3, TResult)) As FSharpFunc(Of T1, FSharpFunc(Of T2, FSharpFunc(Of T3, TResult)))" />
      <MemberSignature Language="F#" Value="static member FromFunc : Func&lt;'T1, 'T2, 'T3, 'Result&gt; -&gt; ('T1 -&gt; 'T2 -&gt; 'T3 -&gt; 'Result)" Usage="Microsoft.FSharp.Core.FuncConvert.FromFunc func" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Core.FSharpFunc&lt;T1,Microsoft.FSharp.Core.FSharpFunc&lt;T2,Microsoft.FSharp.Core.FSharpFunc&lt;T3,TResult&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="func" Type="System.Func&lt;T1,T2,T3,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="func">The input Func delegate.</param>
        <summary>Convert the given Func delegate object to an F# function value</summary>
        <returns>The F# function.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromFunc&lt;T1,T2,T3,T4,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Core.FSharpFunc&lt;T1,Microsoft.FSharp.Core.FSharpFunc&lt;T2,Microsoft.FSharp.Core.FSharpFunc&lt;T3,Microsoft.FSharp.Core.FSharpFunc&lt;T4,TResult&gt;&gt;&gt;&gt; FromFunc&lt;T1,T2,T3,T4,TResult&gt; (Func&lt;T1,T2,T3,T4,TResult&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T1, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T2, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T3, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T4, !!TResult&gt;&gt;&gt;&gt; FromFunc&lt;T1, T2, T3, T4, TResult&gt;(class System.Func`5&lt;!!T1, !!T2, !!T3, !!T4, !!TResult&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.FuncConvert.FromFunc``5(System.Func{``0,``1,``2,``3,``4})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFunc(Of T1, T2, T3, T4, TResult) (func As Func(Of T1, T2, T3, T4, TResult)) As FSharpFunc(Of T1, FSharpFunc(Of T2, FSharpFunc(Of T3, FSharpFunc(Of T4, TResult))))" />
      <MemberSignature Language="F#" Value="static member FromFunc : Func&lt;'T1, 'T2, 'T3, 'T4, 'Result&gt; -&gt; ('T1 -&gt; 'T2 -&gt; 'T3 -&gt; 'T4 -&gt; 'Result)" Usage="Microsoft.FSharp.Core.FuncConvert.FromFunc func" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Core.FSharpFunc&lt;T1,Microsoft.FSharp.Core.FSharpFunc&lt;T2,Microsoft.FSharp.Core.FSharpFunc&lt;T3,Microsoft.FSharp.Core.FSharpFunc&lt;T4,TResult&gt;&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="func" Type="System.Func&lt;T1,T2,T3,T4,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="func">The input Func delegate.</param>
        <summary>Convert the given Func delegate object to an F# function value</summary>
        <returns>The F# function.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromFunc&lt;T1,T2,T3,T4,T5,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Core.FSharpFunc&lt;T1,Microsoft.FSharp.Core.FSharpFunc&lt;T2,Microsoft.FSharp.Core.FSharpFunc&lt;T3,Microsoft.FSharp.Core.FSharpFunc&lt;T4,Microsoft.FSharp.Core.FSharpFunc&lt;T5,TResult&gt;&gt;&gt;&gt;&gt; FromFunc&lt;T1,T2,T3,T4,T5,TResult&gt; (Func&lt;T1,T2,T3,T4,T5,TResult&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T1, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T2, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T3, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T4, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T5, !!TResult&gt;&gt;&gt;&gt;&gt; FromFunc&lt;T1, T2, T3, T4, T5, TResult&gt;(class System.Func`6&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!TResult&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.FuncConvert.FromFunc``6(System.Func{``0,``1,``2,``3,``4,``5})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFunc(Of T1, T2, T3, T4, T5, TResult) (func As Func(Of T1, T2, T3, T4, T5, TResult)) As FSharpFunc(Of T1, FSharpFunc(Of T2, FSharpFunc(Of T3, FSharpFunc(Of T4, FSharpFunc(Of T5, TResult)))))" />
      <MemberSignature Language="F#" Value="static member FromFunc : Func&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'Result&gt; -&gt; ('T1 -&gt; 'T2 -&gt; 'T3 -&gt; 'T4 -&gt; 'T5 -&gt; 'Result)" Usage="Microsoft.FSharp.Core.FuncConvert.FromFunc func" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Core.FSharpFunc&lt;T1,Microsoft.FSharp.Core.FSharpFunc&lt;T2,Microsoft.FSharp.Core.FSharpFunc&lt;T3,Microsoft.FSharp.Core.FSharpFunc&lt;T4,Microsoft.FSharp.Core.FSharpFunc&lt;T5,TResult&gt;&gt;&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="func" Type="System.Func&lt;T1,T2,T3,T4,T5,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="func">The input Func delegate.</param>
        <summary>Convert the given Func delegate object to an F# function value</summary>
        <returns>The F# function.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FuncFromTupled&lt;T1,T2,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Core.FSharpFunc&lt;T1,Microsoft.FSharp.Core.FSharpFunc&lt;T2,TResult&gt;&gt; FuncFromTupled&lt;T1,T2,TResult&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;Tuple&lt;T1,T2&gt;,TResult&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T1, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T2, !!TResult&gt;&gt; FuncFromTupled&lt;T1, T2, TResult&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;class System.Tuple`2&lt;!!T1, !!T2&gt;, !!TResult&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``3(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1},``2})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FuncFromTupled(Of T1, T2, TResult) (func As FSharpFunc(Of Tuple(Of T1, T2), TResult)) As FSharpFunc(Of T1, FSharpFunc(Of T2, TResult))" />
      <MemberSignature Language="F#" Value="static member FuncFromTupled : ('T1 * 'T2 -&gt; 'Result) -&gt; ('T1 -&gt; 'T2 -&gt; 'Result)" Usage="Microsoft.FSharp.Core.FuncConvert.FuncFromTupled func" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Core.FSharpFunc&lt;T1,Microsoft.FSharp.Core.FSharpFunc&lt;T2,TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="func" Type="Microsoft.FSharp.Core.FSharpFunc&lt;System.Tuple&lt;T1,T2&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="func">The input tupled function.</param>
        <summary>A utility function to convert function values from tupled to curried form</summary>
        <returns>The output curried function.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FuncFromTupled&lt;T1,T2,T3,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Core.FSharpFunc&lt;T1,Microsoft.FSharp.Core.FSharpFunc&lt;T2,Microsoft.FSharp.Core.FSharpFunc&lt;T3,TResult&gt;&gt;&gt; FuncFromTupled&lt;T1,T2,T3,TResult&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;Tuple&lt;T1,T2,T3&gt;,TResult&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T1, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T2, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T3, !!TResult&gt;&gt;&gt; FuncFromTupled&lt;T1, T2, T3, TResult&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;class System.Tuple`3&lt;!!T1, !!T2, !!T3&gt;, !!TResult&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``4(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2},``3})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FuncFromTupled(Of T1, T2, T3, TResult) (func As FSharpFunc(Of Tuple(Of T1, T2, T3), TResult)) As FSharpFunc(Of T1, FSharpFunc(Of T2, FSharpFunc(Of T3, TResult)))" />
      <MemberSignature Language="F#" Value="static member FuncFromTupled : ('T1 * 'T2 * 'T3 -&gt; 'Result) -&gt; ('T1 -&gt; 'T2 -&gt; 'T3 -&gt; 'Result)" Usage="Microsoft.FSharp.Core.FuncConvert.FuncFromTupled func" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Core.FSharpFunc&lt;T1,Microsoft.FSharp.Core.FSharpFunc&lt;T2,Microsoft.FSharp.Core.FSharpFunc&lt;T3,TResult&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="func" Type="Microsoft.FSharp.Core.FSharpFunc&lt;System.Tuple&lt;T1,T2,T3&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="func">The input tupled function.</param>
        <summary>A utility function to convert function values from tupled to curried form</summary>
        <returns>The output curried function.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FuncFromTupled&lt;T1,T2,T3,T4,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Core.FSharpFunc&lt;T1,Microsoft.FSharp.Core.FSharpFunc&lt;T2,Microsoft.FSharp.Core.FSharpFunc&lt;T3,Microsoft.FSharp.Core.FSharpFunc&lt;T4,TResult&gt;&gt;&gt;&gt; FuncFromTupled&lt;T1,T2,T3,T4,TResult&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;Tuple&lt;T1,T2,T3,T4&gt;,TResult&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T1, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T2, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T3, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T4, !!TResult&gt;&gt;&gt;&gt; FuncFromTupled&lt;T1, T2, T3, T4, TResult&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;class System.Tuple`4&lt;!!T1, !!T2, !!T3, !!T4&gt;, !!TResult&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``5(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3},``4})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FuncFromTupled(Of T1, T2, T3, T4, TResult) (func As FSharpFunc(Of Tuple(Of T1, T2, T3, T4), TResult)) As FSharpFunc(Of T1, FSharpFunc(Of T2, FSharpFunc(Of T3, FSharpFunc(Of T4, TResult))))" />
      <MemberSignature Language="F#" Value="static member FuncFromTupled : ('T1 * 'T2 * 'T3 * 'T4 -&gt; 'Result) -&gt; ('T1 -&gt; 'T2 -&gt; 'T3 -&gt; 'T4 -&gt; 'Result)" Usage="Microsoft.FSharp.Core.FuncConvert.FuncFromTupled func" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Core.FSharpFunc&lt;T1,Microsoft.FSharp.Core.FSharpFunc&lt;T2,Microsoft.FSharp.Core.FSharpFunc&lt;T3,Microsoft.FSharp.Core.FSharpFunc&lt;T4,TResult&gt;&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="func" Type="Microsoft.FSharp.Core.FSharpFunc&lt;System.Tuple&lt;T1,T2,T3,T4&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="func">The input tupled function.</param>
        <summary>A utility function to convert function values from tupled to curried form</summary>
        <returns>The output curried function.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FuncFromTupled&lt;T1,T2,T3,T4,T5,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Core.FSharpFunc&lt;T1,Microsoft.FSharp.Core.FSharpFunc&lt;T2,Microsoft.FSharp.Core.FSharpFunc&lt;T3,Microsoft.FSharp.Core.FSharpFunc&lt;T4,Microsoft.FSharp.Core.FSharpFunc&lt;T5,TResult&gt;&gt;&gt;&gt;&gt; FuncFromTupled&lt;T1,T2,T3,T4,T5,TResult&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;Tuple&lt;T1,T2,T3,T4,T5&gt;,TResult&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T1, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T2, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T3, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T4, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T5, !!TResult&gt;&gt;&gt;&gt;&gt; FuncFromTupled&lt;T1, T2, T3, T4, T5, TResult&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;class System.Tuple`5&lt;!!T1, !!T2, !!T3, !!T4, !!T5&gt;, !!TResult&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``6(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4},``5})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FuncFromTupled(Of T1, T2, T3, T4, T5, TResult) (func As FSharpFunc(Of Tuple(Of T1, T2, T3, T4, T5), TResult)) As FSharpFunc(Of T1, FSharpFunc(Of T2, FSharpFunc(Of T3, FSharpFunc(Of T4, FSharpFunc(Of T5, TResult)))))" />
      <MemberSignature Language="F#" Value="static member FuncFromTupled : ('T1 * 'T2 * 'T3 * 'T4 * 'T5 -&gt; 'Result) -&gt; ('T1 -&gt; 'T2 -&gt; 'T3 -&gt; 'T4 -&gt; 'T5 -&gt; 'Result)" Usage="Microsoft.FSharp.Core.FuncConvert.FuncFromTupled func" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Core.FSharpFunc&lt;T1,Microsoft.FSharp.Core.FSharpFunc&lt;T2,Microsoft.FSharp.Core.FSharpFunc&lt;T3,Microsoft.FSharp.Core.FSharpFunc&lt;T4,Microsoft.FSharp.Core.FSharpFunc&lt;T5,TResult&gt;&gt;&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="func" Type="Microsoft.FSharp.Core.FSharpFunc&lt;System.Tuple&lt;T1,T2,T3,T4,T5&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="func">The input tupled function.</param>
        <summary>A utility function to convert function values from tupled to curried form</summary>
        <returns>The output curried function.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFSharpFunc&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.Unit&gt; ToFSharpFunc&lt;T&gt; (Action&lt;T&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T, class Microsoft.FSharp.Core.Unit&gt; ToFSharpFunc&lt;T&gt;(class System.Action`1&lt;!!T&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.FuncConvert.ToFSharpFunc``1(System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToFSharpFunc(Of T) (action As Action(Of T)) As FSharpFunc(Of T, Unit)" />
      <MemberSignature Language="F#" Value="static member ToFSharpFunc : Action&lt;'T&gt; -&gt; ('T -&gt; unit)" Usage="Microsoft.FSharp.Core.FuncConvert.ToFSharpFunc action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.Unit&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="action">The input Action delegate.</param>
        <summary>Convert the given Action delegate object to an F# function value</summary>
        <returns>The F# function.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>