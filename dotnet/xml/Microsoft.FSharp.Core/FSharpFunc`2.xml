<Type Name="FSharpFunc&lt;T,TResult&gt;" FullName="Microsoft.FSharp.Core.FSharpFunc&lt;T,TResult&gt;">
  <TypeSignature Language="C#" Value="public abstract class FSharpFunc&lt;T,TResult&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit FSharpFunc`2&lt;T, TResult&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.FSharp.Core.FSharpFunc`2" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class FSharpFunc(Of T, TResult)" />
  <TypeSignature Language="F#" Value="type 'T -&gt; 'Result = class" />
  <AssemblyInfo>
    <AssemblyName>FSharp.Core</AssemblyName>
    <AssemblyVersion>4.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
    <TypeParameter Name="TResult" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.AbstractClass</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.ObjectType)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">To be added.</typeparam>
    <typeparam name="TResult">To be added.</typeparam>
    <summary>The CLI type used to represent F# function values. This type is not
 typically used directly, though may be used from other CLI languages.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FSharpFunc ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.FSharpFunc`2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Construct an instance of an F# first class function value </summary>
        <returns>The created F# function.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public abstract TResult Invoke (T func);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance !TResult Invoke(!T func) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.FSharpFunc`2.Invoke(`0)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Invoke (func As T) As TResult" />
      <MemberSignature Language="F#" Value="abstract member Invoke : 'T -&gt; 'Result" Usage="func.Invoke func" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="func" Type="T" />
      </Parameters>
      <Docs>
        <param name="func"></param>
        <summary>Invoke an F# first class function value with one argument</summary>
        <returns>'U</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeFast&lt;V&gt;">
      <MemberSignature Language="C#" Value="public static V InvokeFast&lt;V&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.FSharpFunc&lt;TResult,V&gt;&gt; func, T arg1, TResult arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!V InvokeFast&lt;V&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;!T, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!TResult, !!V&gt;&gt; func, !T arg1, !TResult arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.FSharpFunc`2.InvokeFast``1(Microsoft.FSharp.Core.FSharpFunc{`0,Microsoft.FSharp.Core.FSharpFunc{`1,``0}},`0,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InvokeFast(Of V) (func As FSharpFunc(Of T, FSharpFunc(Of TResult, V)), arg1 As T, arg2 As TResult) As V" />
      <MemberSignature Language="F#" Value="static member InvokeFast : ('T -&gt; 'Result -&gt; 'V) * 'T * 'Result -&gt; 'V" Usage="Microsoft.FSharp.Core.'T -&gt; 'Result.InvokeFast (func, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>V</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="V" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="func" Type="Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.FSharpFunc&lt;TResult,V&gt;&gt;" />
        <Parameter Name="arg1" Type="T" />
        <Parameter Name="arg2" Type="TResult" />
      </Parameters>
      <Docs>
        <typeparam name="V">To be added.</typeparam>
        <param name="func">The input function.</param>
        <param name="arg1">The first arg.</param>
        <param name="arg2">The second arg.</param>
        <summary>Invoke an F# first class function value with two curried arguments. In some cases this
 will result in a more efficient application than applying the arguments successively.</summary>
        <returns>The function result.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeFast&lt;V,W&gt;">
      <MemberSignature Language="C#" Value="public static W InvokeFast&lt;V,W&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.FSharpFunc&lt;TResult,Microsoft.FSharp.Core.FSharpFunc&lt;V,W&gt;&gt;&gt; func, T arg1, TResult arg2, V arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!W InvokeFast&lt;V, W&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;!T, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!TResult, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!V, !!W&gt;&gt;&gt; func, !T arg1, !TResult arg2, !!V arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.FSharpFunc`2.InvokeFast``2(Microsoft.FSharp.Core.FSharpFunc{`0,Microsoft.FSharp.Core.FSharpFunc{`1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}}},`0,`1,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InvokeFast(Of V, W) (func As FSharpFunc(Of T, FSharpFunc(Of TResult, FSharpFunc(Of V, W))), arg1 As T, arg2 As TResult, arg3 As V) As W" />
      <MemberSignature Language="F#" Value="static member InvokeFast : ('T -&gt; 'Result -&gt; 'V -&gt; 'W) * 'T * 'Result * 'V -&gt; 'W" Usage="Microsoft.FSharp.Core.'T -&gt; 'Result.InvokeFast (func, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>W</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="V" />
        <TypeParameter Name="W" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="func" Type="Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.FSharpFunc&lt;TResult,Microsoft.FSharp.Core.FSharpFunc&lt;V,W&gt;&gt;&gt;" />
        <Parameter Name="arg1" Type="T" />
        <Parameter Name="arg2" Type="TResult" />
        <Parameter Name="arg3" Type="V" />
      </Parameters>
      <Docs>
        <typeparam name="V">To be added.</typeparam>
        <typeparam name="W">To be added.</typeparam>
        <param name="func">The input function.</param>
        <param name="arg1">The first arg.</param>
        <param name="arg2">The second arg.</param>
        <param name="arg3">The third arg.</param>
        <summary>Invoke an F# first class function value with three curried arguments. In some cases this
 will result in a more efficient application than applying the arguments successively.</summary>
        <returns>The function result.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeFast&lt;V,W,X&gt;">
      <MemberSignature Language="C#" Value="public static X InvokeFast&lt;V,W,X&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.FSharpFunc&lt;TResult,Microsoft.FSharp.Core.FSharpFunc&lt;V,Microsoft.FSharp.Core.FSharpFunc&lt;W,X&gt;&gt;&gt;&gt; func, T arg1, TResult arg2, V arg3, W arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!X InvokeFast&lt;V, W, X&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;!T, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!TResult, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!V, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!W, !!X&gt;&gt;&gt;&gt; func, !T arg1, !TResult arg2, !!V arg3, !!W arg4) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.FSharpFunc`2.InvokeFast``3(Microsoft.FSharp.Core.FSharpFunc{`0,Microsoft.FSharp.Core.FSharpFunc{`1,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}}},`0,`1,``0,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InvokeFast(Of V, W, X) (func As FSharpFunc(Of T, FSharpFunc(Of TResult, FSharpFunc(Of V, FSharpFunc(Of W, X)))), arg1 As T, arg2 As TResult, arg3 As V, arg4 As W) As X" />
      <MemberSignature Language="F#" Value="static member InvokeFast : ('T -&gt; 'Result -&gt; 'V -&gt; 'W -&gt; 'X) * 'T * 'Result * 'V * 'W -&gt; 'X" Usage="Microsoft.FSharp.Core.'T -&gt; 'Result.InvokeFast (func, arg1, arg2, arg3, arg4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>X</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="V" />
        <TypeParameter Name="W" />
        <TypeParameter Name="X" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="func" Type="Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.FSharpFunc&lt;TResult,Microsoft.FSharp.Core.FSharpFunc&lt;V,Microsoft.FSharp.Core.FSharpFunc&lt;W,X&gt;&gt;&gt;&gt;" />
        <Parameter Name="arg1" Type="T" />
        <Parameter Name="arg2" Type="TResult" />
        <Parameter Name="arg3" Type="V" />
        <Parameter Name="arg4" Type="W" />
      </Parameters>
      <Docs>
        <typeparam name="V">To be added.</typeparam>
        <typeparam name="W">To be added.</typeparam>
        <typeparam name="X">To be added.</typeparam>
        <param name="func">The input function.</param>
        <param name="arg1">The first arg.</param>
        <param name="arg2">The second arg.</param>
        <param name="arg3">The third arg.</param>
        <param name="arg4">The fourth arg.</param>
        <summary>Invoke an F# first class function value with four curried arguments. In some cases this
 will result in a more efficient application than applying the arguments successively.</summary>
        <returns>The function result.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeFast&lt;V,W,X,Y&gt;">
      <MemberSignature Language="C#" Value="public static Y InvokeFast&lt;V,W,X,Y&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.FSharpFunc&lt;TResult,Microsoft.FSharp.Core.FSharpFunc&lt;V,Microsoft.FSharp.Core.FSharpFunc&lt;W,Microsoft.FSharp.Core.FSharpFunc&lt;X,Y&gt;&gt;&gt;&gt;&gt; func, T arg1, TResult arg2, V arg3, W arg4, X arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!Y InvokeFast&lt;V, W, X, Y&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;!T, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!TResult, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!V, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!W, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!X, !!Y&gt;&gt;&gt;&gt;&gt; func, !T arg1, !TResult arg2, !!V arg3, !!W arg4, !!X arg5) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.FSharpFunc`2.InvokeFast``4(Microsoft.FSharp.Core.FSharpFunc{`0,Microsoft.FSharp.Core.FSharpFunc{`1,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``3}}}}},`0,`1,``0,``1,``2)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InvokeFast(Of V, W, X, Y) (func As FSharpFunc(Of T, FSharpFunc(Of TResult, FSharpFunc(Of V, FSharpFunc(Of W, FSharpFunc(Of X, Y))))), arg1 As T, arg2 As TResult, arg3 As V, arg4 As W, arg5 As X) As Y" />
      <MemberSignature Language="F#" Value="static member InvokeFast : ('T -&gt; 'Result -&gt; 'V -&gt; 'W -&gt; 'X -&gt; 'Y) * 'T * 'Result * 'V * 'W * 'X -&gt; 'Y" Usage="Microsoft.FSharp.Core.'T -&gt; 'Result.InvokeFast (func, arg1, arg2, arg3, arg4, arg5)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Y</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="V" />
        <TypeParameter Name="W" />
        <TypeParameter Name="X" />
        <TypeParameter Name="Y" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="func" Type="Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.FSharpFunc&lt;TResult,Microsoft.FSharp.Core.FSharpFunc&lt;V,Microsoft.FSharp.Core.FSharpFunc&lt;W,Microsoft.FSharp.Core.FSharpFunc&lt;X,Y&gt;&gt;&gt;&gt;&gt;" />
        <Parameter Name="arg1" Type="T" />
        <Parameter Name="arg2" Type="TResult" />
        <Parameter Name="arg3" Type="V" />
        <Parameter Name="arg4" Type="W" />
        <Parameter Name="arg5" Type="X" />
      </Parameters>
      <Docs>
        <typeparam name="V">To be added.</typeparam>
        <typeparam name="W">To be added.</typeparam>
        <typeparam name="X">To be added.</typeparam>
        <typeparam name="Y">To be added.</typeparam>
        <param name="func">The input function.</param>
        <param name="arg1">The first arg.</param>
        <param name="arg2">The second arg.</param>
        <param name="arg3">The third arg.</param>
        <param name="arg4">The fourth arg.</param>
        <param name="arg5">The fifth arg.</param>
        <summary>Invoke an F# first class function value with five curried arguments. In some cases this
 will result in a more efficient application than applying the arguments successively.</summary>
        <returns>The function result.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>