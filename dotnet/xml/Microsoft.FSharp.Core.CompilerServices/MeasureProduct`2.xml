<Type Name="MeasureProduct&lt;TMeasure1,TMeasure2&gt;" FullName="Microsoft.FSharp.Core.CompilerServices.MeasureProduct&lt;TMeasure1,TMeasure2&gt;">
  <TypeSignature Language="C#" Value="public sealed class MeasureProduct&lt;TMeasure1,TMeasure2&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit MeasureProduct`2&lt;TMeasure1, TMeasure2&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.FSharp.Core.CompilerServices.MeasureProduct`2" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MeasureProduct(Of TMeasure1, TMeasure2)" />
  <TypeSignature Language="F#" Value="type MeasureProduct&lt;'TMeasure1, 'TMeasure2&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>FSharp.Core</AssemblyName>
    <AssemblyVersion>4.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TMeasure1" />
    <TypeParameter Name="TMeasure2" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.ObjectType)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.Sealed</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TMeasure1">To be added.</typeparam>
    <typeparam name="TMeasure2">To be added.</typeparam>
    <summary>Represents the product of two measure expressions when returned as a generic argument of a provided type.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members />
</Type>