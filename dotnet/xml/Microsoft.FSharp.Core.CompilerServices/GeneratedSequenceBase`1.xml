<Type Name="GeneratedSequenceBase&lt;T&gt;" FullName="Microsoft.FSharp.Core.CompilerServices.GeneratedSequenceBase&lt;T&gt;">
  <TypeSignature Language="C#" Value="public abstract class GeneratedSequenceBase&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IEnumerator&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit GeneratedSequenceBase`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IEnumerator`1&lt;!T&gt;, class System.Collections.IEnumerable, class System.Collections.IEnumerator" />
  <TypeSignature Language="DocId" Value="T:Microsoft.FSharp.Core.CompilerServices.GeneratedSequenceBase`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class GeneratedSequenceBase(Of T)&#xA;Implements IEnumerable(Of T), IEnumerator(Of T)" />
  <TypeSignature Language="F#" Value="type GeneratedSequenceBase&lt;'T&gt; = class&#xA;    interface IEnumerator&#xA;    interface IEnumerator&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface seq&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>FSharp.Core</AssemblyName>
    <AssemblyVersion>4.4.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.AbstractClass</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.ObjectType)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">To be added.</typeparam>
    <summary>The F# compiler emits implementations of this type for compiled sequence expressions.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GeneratedSequenceBase ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.CompilerServices.GeneratedSequenceBase`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>The F# compiler emits implementations of this type for compiled sequence expressions.</summary>
        <returns>A new sequence generator for the expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckClose">
      <MemberSignature Language="C#" Value="public abstract bool CheckClose { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckClose" />
      <MemberSignature Language="DocId" Value="P:Microsoft.FSharp.Core.CompilerServices.GeneratedSequenceBase`1.CheckClose" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CheckClose As Boolean" />
      <MemberSignature Language="F#" Value="member this.CheckClose : bool" Usage="Microsoft.FSharp.Core.CompilerServices.GeneratedSequenceBase&lt;'T&gt;.CheckClose" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The F# compiler emits implementations of this type for compiled sequence expressions.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public abstract void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.CompilerServices.GeneratedSequenceBase`1.Close" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Close ()" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit" Usage="generatedSequenceBase.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The F# compiler emits implementations of this type for compiled sequence expressions.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateNext">
      <MemberSignature Language="C#" Value="public abstract int GenerateNext (ref System.Collections.Generic.IEnumerable&lt;T&gt; result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GenerateNext(class System.Collections.Generic.IEnumerable`1&lt;!T&gt;&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.CompilerServices.GeneratedSequenceBase`1.GenerateNext(System.Collections.Generic.IEnumerable{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GenerateNext (ByRef result As IEnumerable(Of T)) As Integer" />
      <MemberSignature Language="F#" Value="abstract member GenerateNext :  -&gt; int" Usage="generatedSequenceBase.GenerateNext result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.Collections.Generic.IEnumerable&lt;T&gt;&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="result">A reference to the sequence.</param>
        <summary>The F# compiler emits implementations of this type for compiled sequence expressions.</summary>
        <returns>A 0, 1, and 2 respectively indicate Stop, Yield, and Goto conditions for the sequence generator.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFreshEnumerator">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerator&lt;T&gt; GetFreshEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; GetFreshEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Core.CompilerServices.GeneratedSequenceBase`1.GetFreshEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetFreshEnumerator () As IEnumerator(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetFreshEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="generatedSequenceBase.GetFreshEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The F# compiler emits implementations of this type for compiled sequence expressions.</summary>
        <returns>A new enumerator for the sequence.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastGenerated">
      <MemberSignature Language="C#" Value="public abstract T LastGenerated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T LastGenerated" />
      <MemberSignature Language="DocId" Value="P:Microsoft.FSharp.Core.CompilerServices.GeneratedSequenceBase`1.LastGenerated" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property LastGenerated As T" />
      <MemberSignature Language="F#" Value="member this.LastGenerated : 'T" Usage="Microsoft.FSharp.Core.CompilerServices.GeneratedSequenceBase&lt;'T&gt;.LastGenerated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The F# compiler emits implementations of this type for compiled sequence expressions.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>