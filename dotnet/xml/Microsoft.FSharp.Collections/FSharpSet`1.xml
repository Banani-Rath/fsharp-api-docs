<Type Name="FSharpSet&lt;T&gt;" FullName="Microsoft.FSharp.Collections.FSharpSet&lt;T&gt;">
  <TypeSignature Language="C#" Value="public sealed class FSharpSet&lt;T&gt; : IComparable, System.Collections.Generic.ICollection&lt;T&gt;, System.Collections.Generic.IEnumerable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FSharpSet`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.ICollection`1&lt;!T&gt;, class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable, class System.IComparable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.FSharp.Collections.FSharpSet`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class FSharpSet(Of T)&#xA;Implements ICollection(Of T), IComparable, IEnumerable(Of T)" />
  <TypeSignature Language="F#" Value="type Set&lt;'T&gt; = class&#xA;    interface IEnumerable&#xA;    interface seq&lt;'T&gt;&#xA;    interface ICollection&lt;'T&gt;&#xA;    interface IComparable" />
  <AssemblyInfo>
    <AssemblyName>FSharp.Core</AssemblyName>
    <AssemblyVersion>4.4.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.EqualityConditionalOn</AttributeName>
        </Attribute>
      </Attributes>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.ObjectType)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.CompiledName("FSharpSet`1")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.Sealed</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(Microsoft.FSharp.Collections.SetDebugView`1))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">To be added.</typeparam>
    <summary>Immutable sets based on binary trees, where comparison is the
 F# structural comparison function, potentially using implementations
 of the IComparable interface on key values.</summary>
    <remarks>See the Set module for further operations on sets.

 All members of this class are thread-safe and may be used concurrently from multiple threads.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FSharpSet (System.Collections.Generic.IEnumerable&lt;T&gt; elements);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; elements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.FSharpSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (elements As IEnumerable(Of T))" />
      <MemberSignature Language="F#" Value="new Set&lt;'T&gt; : seq&lt;'T&gt; -&gt; Set&lt;'T&gt;" Usage="new Microsoft.FSharp.Collections.Set&lt;'T&gt; elements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="elements" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="elements">The input sequence.</param>
        <summary>Create a set containing elements drawn from the given sequence.</summary>
        <returns>The result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public Microsoft.FSharp.Collections.FSharpSet&lt;T&gt; Add (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.FSharp.Collections.FSharpSet`1&lt;!T&gt; Add(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.FSharpSet`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As T) As FSharpSet(Of T)" />
      <MemberSignature Language="F#" Value="member this.Add : 'T -&gt; Set&lt;'T&gt;" Usage="set.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Collections.FSharpSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">The value to add to the set.</param>
        <summary>A useful shortcut for Set.add. Note this operation produces a new set
 and does not mutate the original set. The new set will share many storage
 nodes with the original. See the Set module for further operations on sets.</summary>
        <returns>The result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.FSharpSet`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As T) As Boolean" />
      <MemberSignature Language="F#" Value="member this.Contains : 'T -&gt; bool" Usage="set.Contains value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">The value to check.</param>
        <summary>A useful shortcut for Set.contains. See the Set module for further operations on sets.</summary>
        <returns>True if the set contains <c>value</c>.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.FSharp.Collections.FSharpSet`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="Microsoft.FSharp.Collections.Set&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The number of elements in the set</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object that);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object that) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.FSharpSet`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (that As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="set.Equals that" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="that" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="that">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.FSharpSet`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="set.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:Microsoft.FSharp.Collections.FSharpSet`1.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="Microsoft.FSharp.Collections.Set&lt;'T&gt;.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A useful shortcut for Set.isEmpty. See the Set module for further operations on sets.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsProperSubsetOf">
      <MemberSignature Language="C#" Value="public bool IsProperSubsetOf (Microsoft.FSharp.Collections.FSharpSet&lt;T&gt; otherSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsProperSubsetOf(class Microsoft.FSharp.Collections.FSharpSet`1&lt;!T&gt; otherSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.FSharpSet`1.IsProperSubsetOf(Microsoft.FSharp.Collections.FSharpSet{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IsProperSubsetOf (otherSet As FSharpSet(Of T)) As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsProperSubsetOf : Set&lt;'T&gt; -&gt; bool" Usage="set.IsProperSubsetOf otherSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherSet" Type="Microsoft.FSharp.Collections.FSharpSet&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="otherSet">The set to test against.</param>
        <summary>Evaluates to "true" if all elements of the first set are in the second, and at least 
 one element of the second is not in the first.</summary>
        <returns>True if this set is a proper subset of <c>otherSet</c>.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsProperSupersetOf">
      <MemberSignature Language="C#" Value="public bool IsProperSupersetOf (Microsoft.FSharp.Collections.FSharpSet&lt;T&gt; otherSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsProperSupersetOf(class Microsoft.FSharp.Collections.FSharpSet`1&lt;!T&gt; otherSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.FSharpSet`1.IsProperSupersetOf(Microsoft.FSharp.Collections.FSharpSet{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IsProperSupersetOf (otherSet As FSharpSet(Of T)) As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsProperSupersetOf : Set&lt;'T&gt; -&gt; bool" Usage="set.IsProperSupersetOf otherSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherSet" Type="Microsoft.FSharp.Collections.FSharpSet&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="otherSet">The set to test against.</param>
        <summary>Evaluates to "true" if all elements of the second set are in the first, and at least 
 one element of the first is not in the second.</summary>
        <returns>True if this set is a proper superset of <c>otherSet</c>.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public bool IsSubsetOf (Microsoft.FSharp.Collections.FSharpSet&lt;T&gt; otherSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsSubsetOf(class Microsoft.FSharp.Collections.FSharpSet`1&lt;!T&gt; otherSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.FSharpSet`1.IsSubsetOf(Microsoft.FSharp.Collections.FSharpSet{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSubsetOf (otherSet As FSharpSet(Of T)) As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsSubsetOf : Set&lt;'T&gt; -&gt; bool" Usage="set.IsSubsetOf otherSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherSet" Type="Microsoft.FSharp.Collections.FSharpSet&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="otherSet">The set to test against.</param>
        <summary>Evaluates to "true" if all elements of the first set are in the second.</summary>
        <returns>True if this set is a subset of <c>otherSet</c>.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupersetOf">
      <MemberSignature Language="C#" Value="public bool IsSupersetOf (Microsoft.FSharp.Collections.FSharpSet&lt;T&gt; otherSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsSupersetOf(class Microsoft.FSharp.Collections.FSharpSet`1&lt;!T&gt; otherSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.FSharpSet`1.IsSupersetOf(Microsoft.FSharp.Collections.FSharpSet{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSupersetOf (otherSet As FSharpSet(Of T)) As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsSupersetOf : Set&lt;'T&gt; -&gt; bool" Usage="set.IsSupersetOf otherSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherSet" Type="Microsoft.FSharp.Collections.FSharpSet&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="otherSet">The set to test against.</param>
        <summary>Evaluates to "true" if all elements of the second set are in the first.</summary>
        <returns>True if this set is a superset of <c>otherSet</c>.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumElement">
      <MemberSignature Language="C#" Value="public T MaximumElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T MaximumElement" />
      <MemberSignature Language="DocId" Value="P:Microsoft.FSharp.Collections.FSharpSet`1.MaximumElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaximumElement As T" />
      <MemberSignature Language="F#" Value="member this.MaximumElement : 'T" Usage="Microsoft.FSharp.Collections.Set&lt;'T&gt;.MaximumElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the highest element in the set according to the ordering being used for the set.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinimumElement">
      <MemberSignature Language="C#" Value="public T MinimumElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T MinimumElement" />
      <MemberSignature Language="DocId" Value="P:Microsoft.FSharp.Collections.FSharpSet`1.MinimumElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MinimumElement As T" />
      <MemberSignature Language="F#" Value="member this.MinimumElement : 'T" Usage="Microsoft.FSharp.Collections.Set&lt;'T&gt;.MinimumElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the lowest element in the set according to the ordering being used for the set.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Collections.FSharpSet&lt;T&gt; operator + (Microsoft.FSharp.Collections.FSharpSet&lt;T&gt; set1, Microsoft.FSharp.Collections.FSharpSet&lt;T&gt; set2);" />
      <MemberSignature Language="ILAsm" Value=".method public static specialname class Microsoft.FSharp.Collections.FSharpSet`1&lt;!T&gt; op_Addition(class Microsoft.FSharp.Collections.FSharpSet`1&lt;!T&gt; set1, class Microsoft.FSharp.Collections.FSharpSet`1&lt;!T&gt; set2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.FSharpSet`1.op_Addition(Microsoft.FSharp.Collections.FSharpSet{`0},Microsoft.FSharp.Collections.FSharpSet{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (set1 As FSharpSet(Of T), set2 As FSharpSet(Of T)) As FSharpSet(Of T)" />
      <MemberSignature Language="F#" Value="static member ( + ) : Set&lt;'T&gt; * Set&lt;'T&gt; -&gt; Set&lt;'T&gt;" Usage="set1 + set2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Collections.FSharpSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="set1" Type="Microsoft.FSharp.Collections.FSharpSet&lt;T&gt;" />
        <Parameter Name="set2" Type="Microsoft.FSharp.Collections.FSharpSet&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="set1">The first input set.</param>
        <param name="set2">The second input set.</param>
        <summary>Compute the union of the two sets.</summary>
        <returns>The union of the two input sets.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Collections.FSharpSet&lt;T&gt; operator - (Microsoft.FSharp.Collections.FSharpSet&lt;T&gt; set1, Microsoft.FSharp.Collections.FSharpSet&lt;T&gt; set2);" />
      <MemberSignature Language="ILAsm" Value=".method public static specialname class Microsoft.FSharp.Collections.FSharpSet`1&lt;!T&gt; op_Subtraction(class Microsoft.FSharp.Collections.FSharpSet`1&lt;!T&gt; set1, class Microsoft.FSharp.Collections.FSharpSet`1&lt;!T&gt; set2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.FSharpSet`1.op_Subtraction(Microsoft.FSharp.Collections.FSharpSet{`0},Microsoft.FSharp.Collections.FSharpSet{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (set1 As FSharpSet(Of T), set2 As FSharpSet(Of T)) As FSharpSet(Of T)" />
      <MemberSignature Language="F#" Value="static member ( - ) : Set&lt;'T&gt; * Set&lt;'T&gt; -&gt; Set&lt;'T&gt;" Usage="set1 - set2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Collections.FSharpSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="set1" Type="Microsoft.FSharp.Collections.FSharpSet&lt;T&gt;" />
        <Parameter Name="set2" Type="Microsoft.FSharp.Collections.FSharpSet&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="set1">The first input set.</param>
        <param name="set2">The second input set.</param>
        <summary>Returns a new set with the elements of the second set removed from the first.</summary>
        <returns>A set containing elements of the first set that are not contained in the second set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public Microsoft.FSharp.Collections.FSharpSet&lt;T&gt; Remove (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.FSharp.Collections.FSharpSet`1&lt;!T&gt; Remove(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.FSharpSet`1.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (value As T) As FSharpSet(Of T)" />
      <MemberSignature Language="F#" Value="member this.Remove : 'T -&gt; Set&lt;'T&gt;" Usage="set.Remove value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Collections.FSharpSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">The value to remove from the set.</param>
        <summary>A useful shortcut for Set.remove. Note this operation produces a new set
 and does not mutate the original set. The new set will share many storage
 nodes with the original. See the Set module for further operations on sets.</summary>
        <returns>The result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.FSharpSet`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="set.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>