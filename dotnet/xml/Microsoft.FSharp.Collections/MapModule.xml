<Type Name="MapModule" FullName="Microsoft.FSharp.Collections.MapModule">
  <TypeSignature Language="C#" Value="public static class MapModule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed MapModule extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.FSharp.Collections.MapModule" />
  <TypeSignature Language="VB.NET" Value="Public Class MapModule" />
  <TypeSignature Language="F#" Value="module Map" />
  <AssemblyInfo>
    <AssemblyName>FSharp.Core</AssemblyName>
    <AssemblyVersion>4.4.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.Module)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.CompilationRepresentation(Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.RequireQualifiedAccess</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Functional programming operators related to the <c>Map&lt;_,_&gt;</c> type.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Add&lt;TKey,T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt; Add&lt;TKey,T&gt; (TKey key, T value, Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt; table);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt; Add&lt;TKey, T&gt;(!!TKey key, !!T value, class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt; table) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.MapModule.Add``2(``0,``1,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add(Of TKey, T) (key As TKey, value As T, table As FSharpMap(Of TKey, T)) As FSharpMap(Of TKey, T)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Collections.Map.add : 'Key -&gt; 'T -&gt; Map&lt;'Key, 'T&gt; -&gt; Map&lt;'Key, 'T&gt;" Usage="Microsoft.FSharp.Collections.MapModule.Add key value table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("add")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="T" />
        <Parameter Name="table" Type="Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <param name="key">The input key.</param>
        <param name="value">The input value.</param>
        <param name="table">The input map.</param>
        <summary>Returns a new map with the binding added to the given map.
 If a binding with the given key already exists in the input map, the existing binding is replaced by the new binding in the result map.</summary>
        <returns>The resulting map.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey&lt;TKey,T&gt;">
      <MemberSignature Language="C#" Value="public static bool ContainsKey&lt;TKey,T&gt; (TKey key, Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt; table);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool ContainsKey&lt;TKey, T&gt;(!!TKey key, class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt; table) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.MapModule.ContainsKey``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ContainsKey(Of TKey, T) (key As TKey, table As FSharpMap(Of TKey, T)) As Boolean" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Collections.Map.containsKey : 'Key -&gt; Map&lt;'Key, 'T&gt; -&gt; bool" Usage="Microsoft.FSharp.Collections.MapModule.ContainsKey key table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("containsKey")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="table" Type="Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <param name="key">The input key.</param>
        <param name="table">The input map.</param>
        <summary>Tests if an element is in the domain of the map.</summary>
        <returns>True if the map contains the key.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count&lt;TKey,T&gt;">
      <MemberSignature Language="C#" Value="public static int Count&lt;TKey,T&gt; (Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt; table);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Count&lt;TKey, T&gt;(class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt; table) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.MapModule.Count``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Count(Of TKey, T) (table As FSharpMap(Of TKey, T)) As Integer" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Collections.Map.count : Map&lt;'Key, 'T&gt; -&gt; int" Usage="Microsoft.FSharp.Collections.MapModule.Count table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("count")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="table" Type="Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <param name="table">To be added.</param>
        <summary>The number of bindings in the map.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty&lt;TKey,T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt; Empty&lt;TKey,T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt; Empty&lt;TKey, T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.MapModule.Empty``2" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Empty(Of TKey, T) () As FSharpMap(Of TKey, T)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Collections.Map.empty : unit -&gt; Map&lt;'Key, 'T&gt;" Usage="Microsoft.FSharp.Collections.MapModule.Empty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("empty")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.GeneralizableValue</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <summary>The empty map.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exists&lt;TKey,T&gt;">
      <MemberSignature Language="C#" Value="public static bool Exists&lt;TKey,T&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;TKey,Microsoft.FSharp.Core.FSharpFunc&lt;T,bool&gt;&gt; predicate, Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt; table);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool Exists&lt;TKey, T&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!TKey, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T, bool&gt;&gt; predicate, class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt; table) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.MapModule.Exists``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exists(Of TKey, T) (predicate As FSharpFunc(Of TKey, FSharpFunc(Of T, Boolean)), table As FSharpMap(Of TKey, T)) As Boolean" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Collections.Map.exists : ('Key -&gt; 'T -&gt; bool) -&gt; Map&lt;'Key, 'T&gt; -&gt; bool" Usage="Microsoft.FSharp.Collections.MapModule.Exists predicate table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("exists")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="predicate" Type="Microsoft.FSharp.Core.FSharpFunc&lt;TKey,Microsoft.FSharp.Core.FSharpFunc&lt;T,System.Boolean&gt;&gt;" />
        <Parameter Name="table" Type="Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <param name="predicate">The function to test the input elements.</param>
        <param name="table">The input map.</param>
        <summary>Returns true if the given predicate returns true for one of the
 bindings in the map.</summary>
        <returns>True if the predicate returns true for one of the key/value pairs.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter&lt;TKey,T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt; Filter&lt;TKey,T&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;TKey,Microsoft.FSharp.Core.FSharpFunc&lt;T,bool&gt;&gt; predicate, Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt; table);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt; Filter&lt;TKey, T&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!TKey, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T, bool&gt;&gt; predicate, class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt; table) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.MapModule.Filter``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Filter(Of TKey, T) (predicate As FSharpFunc(Of TKey, FSharpFunc(Of T, Boolean)), table As FSharpMap(Of TKey, T)) As FSharpMap(Of TKey, T)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Collections.Map.filter : ('Key -&gt; 'T -&gt; bool) -&gt; Map&lt;'Key, 'T&gt; -&gt; Map&lt;'Key, 'T&gt;" Usage="Microsoft.FSharp.Collections.MapModule.Filter predicate table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("filter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="predicate" Type="Microsoft.FSharp.Core.FSharpFunc&lt;TKey,Microsoft.FSharp.Core.FSharpFunc&lt;T,System.Boolean&gt;&gt;" />
        <Parameter Name="table" Type="Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <param name="predicate">The function to test the key/value pairs.</param>
        <param name="table">The input map.</param>
        <summary>Builds a new map containing only the bindings for which the given predicate returns 'true'.</summary>
        <returns>The filtered map.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Find&lt;TKey,T&gt;">
      <MemberSignature Language="C#" Value="public static T Find&lt;TKey,T&gt; (TKey key, Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt; table);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!T Find&lt;TKey, T&gt;(!!TKey key, class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt; table) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.MapModule.Find``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Find(Of TKey, T) (key As TKey, table As FSharpMap(Of TKey, T)) As T" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Collections.Map.find : 'Key -&gt; Map&lt;'Key, 'T&gt; -&gt; 'T" Usage="Microsoft.FSharp.Collections.MapModule.Find key table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("find")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="table" Type="Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <param name="key">The input key.</param>
        <param name="table">The input map.</param>
        <summary>Lookup an element in the map, raising <c>KeyNotFoundException</c> if no binding
 exists in the map.</summary>
        <returns>The value mapped to the given key.</returns>
        <remarks>To be added.</remarks>
        <exception cref="System.Collections.Generic.KeyNotFoundException">Thrown when the key does not exist in the map.</exception>
      </Docs>
    </Member>
    <Member MemberName="FindKey&lt;TKey,T&gt;">
      <MemberSignature Language="C#" Value="public static TKey FindKey&lt;TKey,T&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;TKey,Microsoft.FSharp.Core.FSharpFunc&lt;T,bool&gt;&gt; predicate, Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt; table);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TKey FindKey&lt;TKey, T&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!TKey, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T, bool&gt;&gt; predicate, class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt; table) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.MapModule.FindKey``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindKey(Of TKey, T) (predicate As FSharpFunc(Of TKey, FSharpFunc(Of T, Boolean)), table As FSharpMap(Of TKey, T)) As TKey" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Collections.Map.findKey : ('Key -&gt; 'T -&gt; bool) -&gt; Map&lt;'Key, 'T&gt; -&gt; 'Key" Usage="Microsoft.FSharp.Collections.MapModule.FindKey predicate table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("findKey")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TKey</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="predicate" Type="Microsoft.FSharp.Core.FSharpFunc&lt;TKey,Microsoft.FSharp.Core.FSharpFunc&lt;T,System.Boolean&gt;&gt;" />
        <Parameter Name="table" Type="Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <param name="predicate">The function to test the input elements.</param>
        <param name="table">The input map.</param>
        <summary>Evaluates the function on each mapping in the collection. Returns the key for the first mapping
 where the function returns 'true'. Raise <c>KeyNotFoundException</c> if no such element exists.</summary>
        <returns>The first key for which the predicate evaluates true.</returns>
        <remarks>To be added.</remarks>
        <exception cref="System.Collections.Generic.KeyNotFoundException">Thrown if the key does not exist in the map.</exception>
      </Docs>
    </Member>
    <Member MemberName="Fold&lt;TKey,T,TState&gt;">
      <MemberSignature Language="C#" Value="public static TState Fold&lt;TKey,T,TState&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;TState,Microsoft.FSharp.Core.FSharpFunc&lt;TKey,Microsoft.FSharp.Core.FSharpFunc&lt;T,TState&gt;&gt;&gt; folder, TState state, Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt; table);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TState Fold&lt;TKey, T, TState&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!TState, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!TKey, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T, !!TState&gt;&gt;&gt; folder, !!TState state, class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt; table) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.MapModule.Fold``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Fold(Of TKey, T, TState) (folder As FSharpFunc(Of TState, FSharpFunc(Of TKey, FSharpFunc(Of T, TState))), state As TState, table As FSharpMap(Of TKey, T)) As TState" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Collections.Map.fold : ('State -&gt; 'Key -&gt; 'T -&gt; 'State) -&gt; 'State -&gt; Map&lt;'Key, 'T&gt; -&gt; 'State" Usage="Microsoft.FSharp.Collections.MapModule.Fold folder state table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("fold")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TState</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="T" />
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="folder" Type="Microsoft.FSharp.Core.FSharpFunc&lt;TState,Microsoft.FSharp.Core.FSharpFunc&lt;TKey,Microsoft.FSharp.Core.FSharpFunc&lt;T,TState&gt;&gt;&gt;" />
        <Parameter Name="state" Type="TState" />
        <Parameter Name="table" Type="Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <typeparam name="TState">To be added.</typeparam>
        <param name="folder">The function to update the state given the input key/value pairs.</param>
        <param name="state">The initial state.</param>
        <param name="table">The input map.</param>
        <summary>Folds over the bindings in the map </summary>
        <returns>The final state value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FoldBack&lt;TKey,T,TState&gt;">
      <MemberSignature Language="C#" Value="public static TState FoldBack&lt;TKey,T,TState&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;TKey,Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.FSharpFunc&lt;TState,TState&gt;&gt;&gt; folder, Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt; table, TState state);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TState FoldBack&lt;TKey, T, TState&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!TKey, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!TState, !!TState&gt;&gt;&gt; folder, class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt; table, !!TState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.MapModule.FoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1},``2)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FoldBack(Of TKey, T, TState) (folder As FSharpFunc(Of TKey, FSharpFunc(Of T, FSharpFunc(Of TState, TState))), table As FSharpMap(Of TKey, T), state As TState) As TState" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Collections.Map.foldBack : ('Key -&gt; 'T -&gt; 'State -&gt; 'State) -&gt; Map&lt;'Key, 'T&gt; -&gt; 'State -&gt; 'State" Usage="Microsoft.FSharp.Collections.MapModule.FoldBack folder table state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("foldBack")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TState</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="T" />
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="folder" Type="Microsoft.FSharp.Core.FSharpFunc&lt;TKey,Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.FSharpFunc&lt;TState,TState&gt;&gt;&gt;" />
        <Parameter Name="table" Type="Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;" />
        <Parameter Name="state" Type="TState" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <typeparam name="TState">To be added.</typeparam>
        <param name="folder">The function to update the state given the input key/value pairs.</param>
        <param name="table">The input map.</param>
        <param name="state">The initial state.</param>
        <summary>Folds over the bindings in the map.</summary>
        <returns>The final state value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForAll&lt;TKey,T&gt;">
      <MemberSignature Language="C#" Value="public static bool ForAll&lt;TKey,T&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;TKey,Microsoft.FSharp.Core.FSharpFunc&lt;T,bool&gt;&gt; predicate, Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt; table);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool ForAll&lt;TKey, T&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!TKey, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T, bool&gt;&gt; predicate, class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt; table) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.MapModule.ForAll``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForAll(Of TKey, T) (predicate As FSharpFunc(Of TKey, FSharpFunc(Of T, Boolean)), table As FSharpMap(Of TKey, T)) As Boolean" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Collections.Map.forall : ('Key -&gt; 'T -&gt; bool) -&gt; Map&lt;'Key, 'T&gt; -&gt; bool" Usage="Microsoft.FSharp.Collections.MapModule.ForAll predicate table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("forall")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="predicate" Type="Microsoft.FSharp.Core.FSharpFunc&lt;TKey,Microsoft.FSharp.Core.FSharpFunc&lt;T,System.Boolean&gt;&gt;" />
        <Parameter Name="table" Type="Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <param name="predicate">The function to test the input elements.</param>
        <param name="table">The input map.</param>
        <summary>Returns true if the given predicate returns true for all of the
 bindings in the map.</summary>
        <returns>True if the predicate evaluates to true for all of the bindings in the map.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty&lt;TKey,T&gt;">
      <MemberSignature Language="C#" Value="public static bool IsEmpty&lt;TKey,T&gt; (Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt; table);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsEmpty&lt;TKey, T&gt;(class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt; table) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.MapModule.IsEmpty``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsEmpty(Of TKey, T) (table As FSharpMap(Of TKey, T)) As Boolean" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Collections.Map.isEmpty : Map&lt;'Key, 'T&gt; -&gt; bool" Usage="Microsoft.FSharp.Collections.MapModule.IsEmpty table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("isEmpty")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="table" Type="Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <param name="table">The input map.</param>
        <summary>Is the map empty?</summary>
        <returns>True if the map is empty.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Iterate&lt;TKey,T&gt;">
      <MemberSignature Language="C#" Value="public static void Iterate&lt;TKey,T&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;TKey,Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.Unit&gt;&gt; action, Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt; table);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Iterate&lt;TKey, T&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!TKey, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T, class Microsoft.FSharp.Core.Unit&gt;&gt; action, class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt; table) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.MapModule.Iterate``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Iterate(Of TKey, T) (action As FSharpFunc(Of TKey, FSharpFunc(Of T, Unit)), table As FSharpMap(Of TKey, T))" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Collections.Map.iter : ('Key -&gt; 'T -&gt; unit) -&gt; Map&lt;'Key, 'T&gt; -&gt; unit" Usage="Microsoft.FSharp.Collections.MapModule.Iterate action table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("iter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="action" Type="Microsoft.FSharp.Core.FSharpFunc&lt;TKey,Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.Unit&gt;&gt;" />
        <Parameter Name="table" Type="Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <param name="action">The function to apply to each key/value pair.</param>
        <param name="table">The input map.</param>
        <summary>Applies the given function to each binding in the dictionary</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Map&lt;TKey,T,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Collections.FSharpMap&lt;TKey,TResult&gt; Map&lt;TKey,T,TResult&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;TKey,Microsoft.FSharp.Core.FSharpFunc&lt;T,TResult&gt;&gt; mapping, Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt; table);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!TResult&gt; Map&lt;TKey, T, TResult&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!TKey, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T, !!TResult&gt;&gt; mapping, class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt; table) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.MapModule.Map``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Map(Of TKey, T, TResult) (mapping As FSharpFunc(Of TKey, FSharpFunc(Of T, TResult)), table As FSharpMap(Of TKey, T)) As FSharpMap(Of TKey, TResult)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Collections.Map.map : ('Key -&gt; 'T -&gt; 'Result) -&gt; Map&lt;'Key, 'T&gt; -&gt; Map&lt;'Key, 'Result&gt;" Usage="Microsoft.FSharp.Collections.MapModule.Map mapping table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("map")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Collections.FSharpMap&lt;TKey,TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="T" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="mapping" Type="Microsoft.FSharp.Core.FSharpFunc&lt;TKey,Microsoft.FSharp.Core.FSharpFunc&lt;T,TResult&gt;&gt;" />
        <Parameter Name="table" Type="Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="mapping">The function to transform the key/value pairs.</param>
        <param name="table">The input map.</param>
        <summary>Builds a new collection whose elements are the results of applying the given function
 to each of the elements of the collection. The key passed to the
 function indicates the key of element being transformed.</summary>
        <returns>The resulting map of keys and transformed values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OfArray&lt;TKey,T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt; OfArray&lt;TKey,T&gt; (Tuple&lt;TKey,T&gt;[] elements);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt; OfArray&lt;TKey, T&gt;(class System.Tuple`2&lt;!!TKey, !!T&gt;[] elements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.MapModule.OfArray``2(System.Tuple{``0,``1}[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OfArray(Of TKey, T) (elements As Tuple(Of TKey, T)()) As FSharpMap(Of TKey, T)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Collections.Map.ofArray : ('Key * 'T[]) -&gt; Map&lt;'Key, 'T&gt;" Usage="Microsoft.FSharp.Collections.MapModule.OfArray elements" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("ofArray")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="elements" Type="System.Tuple&lt;TKey,T&gt;[]" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <param name="elements">The input array of key/value pairs.</param>
        <summary>Returns a new map made from the given bindings.</summary>
        <returns>The resulting map.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OfList&lt;TKey,T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt; OfList&lt;TKey,T&gt; (Microsoft.FSharp.Collections.FSharpList&lt;Tuple&lt;TKey,T&gt;&gt; elements);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt; OfList&lt;TKey, T&gt;(class Microsoft.FSharp.Collections.FSharpList`1&lt;class System.Tuple`2&lt;!!TKey, !!T&gt;&gt; elements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.MapModule.OfList``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OfList(Of TKey, T) (elements As FSharpList(Of Tuple(Of TKey, T))) As FSharpMap(Of TKey, T)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Collections.Map.ofList : List&lt;'Key * 'T&gt; -&gt; Map&lt;'Key, 'T&gt;" Usage="Microsoft.FSharp.Collections.MapModule.OfList elements" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("ofList")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="elements" Type="Microsoft.FSharp.Collections.FSharpList&lt;System.Tuple&lt;TKey,T&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <param name="elements">The input list of key/value pairs.</param>
        <summary>Returns a new map made from the given bindings.</summary>
        <returns>The resulting map.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OfSeq&lt;TKey,T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt; OfSeq&lt;TKey,T&gt; (System.Collections.Generic.IEnumerable&lt;Tuple&lt;TKey,T&gt;&gt; elements);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt; OfSeq&lt;TKey, T&gt;(class System.Collections.Generic.IEnumerable`1&lt;class System.Tuple`2&lt;!!TKey, !!T&gt;&gt; elements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.MapModule.OfSeq``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OfSeq(Of TKey, T) (elements As IEnumerable(Of Tuple(Of TKey, T))) As FSharpMap(Of TKey, T)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Collections.Map.ofSeq : seq&lt;'Key * 'T&gt; -&gt; Map&lt;'Key, 'T&gt;" Usage="Microsoft.FSharp.Collections.MapModule.OfSeq elements" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("ofSeq")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="elements" Type="System.Collections.Generic.IEnumerable&lt;System.Tuple&lt;TKey,T&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <param name="elements">The input sequence of key/value pairs.</param>
        <summary>Returns a new map made from the given bindings.</summary>
        <returns>The resulting map.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Partition&lt;TKey,T&gt;">
      <MemberSignature Language="C#" Value="public static Tuple&lt;Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;,Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;&gt; Partition&lt;TKey,T&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;TKey,Microsoft.FSharp.Core.FSharpFunc&lt;T,bool&gt;&gt; predicate, Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt; table);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Tuple`2&lt;class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt;, class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt;&gt; Partition&lt;TKey, T&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!TKey, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T, bool&gt;&gt; predicate, class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt; table) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.MapModule.Partition``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Partition(Of TKey, T) (predicate As FSharpFunc(Of TKey, FSharpFunc(Of T, Boolean)), table As FSharpMap(Of TKey, T)) As Tuple(Of FSharpMap(Of TKey, T), FSharpMap(Of TKey, T))" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Collections.Map.partition : ('Key -&gt; 'T -&gt; bool) -&gt; Map&lt;'Key, 'T&gt; -&gt; Map&lt;'Key, 'T&gt; * Map&lt;'Key, 'T&gt;" Usage="Microsoft.FSharp.Collections.MapModule.Partition predicate table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("partition")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;,Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="predicate" Type="Microsoft.FSharp.Core.FSharpFunc&lt;TKey,Microsoft.FSharp.Core.FSharpFunc&lt;T,System.Boolean&gt;&gt;" />
        <Parameter Name="table" Type="Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <param name="predicate">The function to test the input elements.</param>
        <param name="table">The input map.</param>
        <summary>Builds two new maps, one containing the bindings for which the given predicate returns 'true',
 and the other the remaining bindings.</summary>
        <returns>A pair of maps in which the first contains the elements for which the predicate returned true
 and the second containing the elements for which the predicated returned false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pick&lt;TKey,T,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Pick&lt;TKey,T,TResult&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;TKey,Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.FSharpOption&lt;TResult&gt;&gt;&gt; chooser, Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt; table);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TResult Pick&lt;TKey, T, TResult&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!TKey, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T, class Microsoft.FSharp.Core.FSharpOption`1&lt;!!TResult&gt;&gt;&gt; chooser, class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt; table) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.MapModule.Pick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Pick(Of TKey, T, TResult) (chooser As FSharpFunc(Of TKey, FSharpFunc(Of T, FSharpOption(Of TResult))), table As FSharpMap(Of TKey, T)) As TResult" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Collections.Map.pick : ('Key -&gt; 'T -&gt; option&lt;'Result&gt;) -&gt; Map&lt;'Key, 'T&gt; -&gt; 'Result" Usage="Microsoft.FSharp.Collections.MapModule.Pick chooser table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("pick")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="T" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="chooser" Type="Microsoft.FSharp.Core.FSharpFunc&lt;TKey,Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.FSharpOption&lt;TResult&gt;&gt;&gt;" />
        <Parameter Name="table" Type="Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="chooser">The function to generate options from the key/value pairs.</param>
        <param name="table">The input map.</param>
        <summary>Searches the map looking for the first element where the given function returns a <c>Some</c> value</summary>
        <returns>The first result.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove&lt;TKey,T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt; Remove&lt;TKey,T&gt; (TKey key, Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt; table);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt; Remove&lt;TKey, T&gt;(!!TKey key, class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt; table) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.MapModule.Remove``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Remove(Of TKey, T) (key As TKey, table As FSharpMap(Of TKey, T)) As FSharpMap(Of TKey, T)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Collections.Map.remove : 'Key -&gt; Map&lt;'Key, 'T&gt; -&gt; Map&lt;'Key, 'T&gt;" Usage="Microsoft.FSharp.Collections.MapModule.Remove key table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("remove")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="table" Type="Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <param name="key">The input key.</param>
        <param name="table">The input map.</param>
        <summary>Removes an element from the domain of the map. No exception is raised if the element is not present.</summary>
        <returns>The resulting map.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToArray&lt;TKey,T&gt;">
      <MemberSignature Language="C#" Value="public static Tuple&lt;TKey,T&gt;[] ToArray&lt;TKey,T&gt; (Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt; table);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Tuple`2&lt;!!TKey, !!T&gt;[] ToArray&lt;TKey, T&gt;(class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt; table) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.MapModule.ToArray``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToArray(Of TKey, T) (table As FSharpMap(Of TKey, T)) As Tuple(Of TKey, T)()" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Collections.Map.toArray : Map&lt;'Key, 'T&gt; -&gt; 'Key * 'T[]" Usage="Microsoft.FSharp.Collections.MapModule.ToArray table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("toArray")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;TKey,T&gt;[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="table" Type="Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <param name="table">The input map.</param>
        <summary>Returns an array of all key-value pairs in the mapping.
 The array will be ordered by the keys of the map.</summary>
        <returns>The array of key/value pairs.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToList&lt;TKey,T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Collections.FSharpList&lt;Tuple&lt;TKey,T&gt;&gt; ToList&lt;TKey,T&gt; (Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt; table);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Collections.FSharpList`1&lt;class System.Tuple`2&lt;!!TKey, !!T&gt;&gt; ToList&lt;TKey, T&gt;(class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt; table) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.MapModule.ToList``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToList(Of TKey, T) (table As FSharpMap(Of TKey, T)) As FSharpList(Of Tuple(Of TKey, T))" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Collections.Map.toList : Map&lt;'Key, 'T&gt; -&gt; List&lt;'Key * 'T&gt;" Usage="Microsoft.FSharp.Collections.MapModule.ToList table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("toList")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Collections.FSharpList&lt;System.Tuple&lt;TKey,T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="table" Type="Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <param name="table">The input map.</param>
        <summary>Returns a list of all key-value pairs in the mapping.
 The list will be ordered by the keys of the map.</summary>
        <returns>The list of key/value pairs.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSeq&lt;TKey,T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Tuple&lt;TKey,T&gt;&gt; ToSeq&lt;TKey,T&gt; (Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt; table);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.Generic.IEnumerable`1&lt;class System.Tuple`2&lt;!!TKey, !!T&gt;&gt; ToSeq&lt;TKey, T&gt;(class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt; table) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.MapModule.ToSeq``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSeq(Of TKey, T) (table As FSharpMap(Of TKey, T)) As IEnumerable(Of Tuple(Of TKey, T))" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Collections.Map.toSeq : Map&lt;'Key, 'T&gt; -&gt; seq&lt;'Key * 'T&gt;" Usage="Microsoft.FSharp.Collections.MapModule.ToSeq table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("toSeq")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Tuple&lt;TKey,T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="table" Type="Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <param name="table">The input map.</param>
        <summary>Views the collection as an enumerable sequence of pairs.
 The sequence will be ordered by the keys of the map.</summary>
        <returns>The sequence of key/value pairs.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFind&lt;TKey,T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Core.FSharpOption&lt;T&gt; TryFind&lt;TKey,T&gt; (TKey key, Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt; table);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Core.FSharpOption`1&lt;!!T&gt; TryFind&lt;TKey, T&gt;(!!TKey key, class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt; table) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.MapModule.TryFind``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFind(Of TKey, T) (key As TKey, table As FSharpMap(Of TKey, T)) As FSharpOption(Of T)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Collections.Map.tryFind : 'Key -&gt; Map&lt;'Key, 'T&gt; -&gt; option&lt;'T&gt;" Usage="Microsoft.FSharp.Collections.MapModule.TryFind key table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("tryFind")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Core.FSharpOption&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="table" Type="Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <param name="key">The input key.</param>
        <param name="table">The input map.</param>
        <summary>Lookup an element in the map, returning a <c>Some</c> value if the element is in the domain 
 of the map and <c>None</c> if not.</summary>
        <returns>The found <c>Some</c> value or <c>None</c>.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFindKey&lt;TKey,T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Core.FSharpOption&lt;TKey&gt; TryFindKey&lt;TKey,T&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;TKey,Microsoft.FSharp.Core.FSharpFunc&lt;T,bool&gt;&gt; predicate, Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt; table);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Core.FSharpOption`1&lt;!!TKey&gt; TryFindKey&lt;TKey, T&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!TKey, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T, bool&gt;&gt; predicate, class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt; table) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.MapModule.TryFindKey``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFindKey(Of TKey, T) (predicate As FSharpFunc(Of TKey, FSharpFunc(Of T, Boolean)), table As FSharpMap(Of TKey, T)) As FSharpOption(Of TKey)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Collections.Map.tryFindKey : ('Key -&gt; 'T -&gt; bool) -&gt; Map&lt;'Key, 'T&gt; -&gt; option&lt;'Key&gt;" Usage="Microsoft.FSharp.Collections.MapModule.TryFindKey predicate table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("tryFindKey")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Core.FSharpOption&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="predicate" Type="Microsoft.FSharp.Core.FSharpFunc&lt;TKey,Microsoft.FSharp.Core.FSharpFunc&lt;T,System.Boolean&gt;&gt;" />
        <Parameter Name="table" Type="Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <param name="predicate">The function to test the input elements.</param>
        <param name="table">The input map.</param>
        <summary>Returns the key of the first mapping in the collection that satisfies the given predicate. 
 Returns 'None' if no such element exists.</summary>
        <returns>The first key for which the predicate returns true or None if the predicate evaluates to false for each key/value pair.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryPick&lt;TKey,T,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Core.FSharpOption&lt;TResult&gt; TryPick&lt;TKey,T,TResult&gt; (Microsoft.FSharp.Core.FSharpFunc&lt;TKey,Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.FSharpOption&lt;TResult&gt;&gt;&gt; chooser, Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt; table);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Core.FSharpOption`1&lt;!!TResult&gt; TryPick&lt;TKey, T, TResult&gt;(class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!TKey, class Microsoft.FSharp.Core.FSharpFunc`2&lt;!!T, class Microsoft.FSharp.Core.FSharpOption`1&lt;!!TResult&gt;&gt;&gt; chooser, class Microsoft.FSharp.Collections.FSharpMap`2&lt;!!TKey, !!T&gt; table) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Collections.MapModule.TryPick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryPick(Of TKey, T, TResult) (chooser As FSharpFunc(Of TKey, FSharpFunc(Of T, FSharpOption(Of TResult))), table As FSharpMap(Of TKey, T)) As FSharpOption(Of TResult)" />
      <MemberSignature Language="F#" Value="Microsoft.FSharp.Collections.Map.tryPick : ('Key -&gt; 'T -&gt; option&lt;'Result&gt;) -&gt; Map&lt;'Key, 'T&gt; -&gt; option&lt;'Result&gt;" Usage="Microsoft.FSharp.Collections.MapModule.TryPick chooser table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Microsoft.FSharp.Core.CompilationSourceName("tryPick")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Core.FSharpOption&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="T" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="chooser" Type="Microsoft.FSharp.Core.FSharpFunc&lt;TKey,Microsoft.FSharp.Core.FSharpFunc&lt;T,Microsoft.FSharp.Core.FSharpOption&lt;TResult&gt;&gt;&gt;" />
        <Parameter Name="table" Type="Microsoft.FSharp.Collections.FSharpMap&lt;TKey,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="T">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="chooser">The function to generate options from the key/value pairs.</param>
        <param name="table">The input map.</param>
        <summary>Searches the map looking for the first element where the given function returns a <c>Some</c> value.</summary>
        <returns>The first result.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>