<Type Name="FSharpType" FullName="Microsoft.FSharp.Reflection.FSharpType">
  <TypeSignature Language="C#" Value="public static class FSharpType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable sealed FSharpType extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.FSharp.Reflection.FSharpType" />
  <TypeSignature Language="VB.NET" Value="Public Class FSharpType" />
  <TypeSignature Language="F#" Value="type Type = class" />
  <AssemblyInfo>
    <AssemblyName>FSharp.Core</AssemblyName>
    <AssemblyVersion>4.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.AbstractClass</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.ObjectType)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Microsoft.FSharp.Core.Sealed</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Contains operations associated with constructing and analyzing F# types such as records, unions and tuples</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetExceptionFields">
      <MemberSignature Language="C#" Value="public static System.Reflection.PropertyInfo[] GetExceptionFields (Type exceptionType, Microsoft.FSharp.Core.FSharpOption&lt;System.Reflection.BindingFlags&gt; bindingFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Reflection.PropertyInfo[] GetExceptionFields(class System.Type exceptionType, class Microsoft.FSharp.Core.FSharpOption`1&lt;valuetype System.Reflection.BindingFlags&gt; bindingFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Reflection.FSharpType.GetExceptionFields(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExceptionFields (exceptionType As Type, bindingFlags As FSharpOption(Of BindingFlags)) As PropertyInfo()" />
      <MemberSignature Language="F#" Value="static member GetExceptionFields : Type * option&lt;System.Reflection.BindingFlags&gt; -&gt; System.Reflection.PropertyInfo[]" Usage="Microsoft.FSharp.Reflection.Type.GetExceptionFields (exceptionType, bindingFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptionType" Type="System.Type" />
        <Parameter Name="bindingFlags" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Reflection.BindingFlags&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.FSharp.Core.OptionalArgument</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="exceptionType">The exception type to read.</param>
        <param name="bindingFlags">Optional binding flags.</param>
        <summary>Reads all the fields from an F# exception declaration, in declaration order</summary>
        <returns>An array containing the PropertyInfo of each field in the exception.</returns>
        <remarks>Assumes <c>exceptionType</c> is an exception representation type. If not, ArgumentException is raised.</remarks>
        <exception cref="System.ArgumentException">Thrown if the given type is not an exception.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetFunctionElements">
      <MemberSignature Language="C#" Value="public static Tuple&lt;Type,Type&gt; GetFunctionElements (Type functionType);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Tuple`2&lt;class System.Type, class System.Type&gt; GetFunctionElements(class System.Type functionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Reflection.FSharpType.GetFunctionElements(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFunctionElements (functionType As Type) As Tuple(Of Type, Type)" />
      <MemberSignature Language="F#" Value="static member GetFunctionElements : Type -&gt; Type * Type" Usage="Microsoft.FSharp.Reflection.Type.GetFunctionElements functionType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;System.Type,System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="functionType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="functionType">The input function type.</param>
        <summary>Gets the domain and range types from an F# function type  or from the runtime type of a closure implementing an F# type</summary>
        <returns>A tuple of the domain and range types of the input function.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRecordFields">
      <MemberSignature Language="C#" Value="public static System.Reflection.PropertyInfo[] GetRecordFields (Type recordType, Microsoft.FSharp.Core.FSharpOption&lt;System.Reflection.BindingFlags&gt; bindingFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Reflection.PropertyInfo[] GetRecordFields(class System.Type recordType, class Microsoft.FSharp.Core.FSharpOption`1&lt;valuetype System.Reflection.BindingFlags&gt; bindingFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Reflection.FSharpType.GetRecordFields(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRecordFields (recordType As Type, bindingFlags As FSharpOption(Of BindingFlags)) As PropertyInfo()" />
      <MemberSignature Language="F#" Value="static member GetRecordFields : Type * option&lt;System.Reflection.BindingFlags&gt; -&gt; System.Reflection.PropertyInfo[]" Usage="Microsoft.FSharp.Reflection.Type.GetRecordFields (recordType, bindingFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recordType" Type="System.Type" />
        <Parameter Name="bindingFlags" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Reflection.BindingFlags&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.FSharp.Core.OptionalArgument</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="recordType">The input record type.</param>
        <param name="bindingFlags">Optional binding flags.</param>
        <summary>Reads all the fields from a record value, in declaration order</summary>
        <returns>An array of descriptions of the properties of the record type.</returns>
        <remarks>Assumes the given input is a record value. If not, ArgumentException is raised.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTupleElements">
      <MemberSignature Language="C#" Value="public static Type[] GetTupleElements (Type tupleType);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Type[] GetTupleElements(class System.Type tupleType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Reflection.FSharpType.GetTupleElements(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTupleElements (tupleType As Type) As Type()" />
      <MemberSignature Language="F#" Value="static member GetTupleElements : Type -&gt; Type[]" Usage="Microsoft.FSharp.Reflection.Type.GetTupleElements tupleType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tupleType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="tupleType">The input tuple type.</param>
        <summary>Gets the tuple elements from the representation of an F# tuple type.</summary>
        <returns>An array of the types contained in the given tuple type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnionCases">
      <MemberSignature Language="C#" Value="public static Microsoft.FSharp.Reflection.UnionCaseInfo[] GetUnionCases (Type unionType, Microsoft.FSharp.Core.FSharpOption&lt;System.Reflection.BindingFlags&gt; bindingFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.FSharp.Reflection.UnionCaseInfo[] GetUnionCases(class System.Type unionType, class Microsoft.FSharp.Core.FSharpOption`1&lt;valuetype System.Reflection.BindingFlags&gt; bindingFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Reflection.FSharpType.GetUnionCases(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnionCases (unionType As Type, bindingFlags As FSharpOption(Of BindingFlags)) As UnionCaseInfo()" />
      <MemberSignature Language="F#" Value="static member GetUnionCases : Type * option&lt;System.Reflection.BindingFlags&gt; -&gt; Microsoft.FSharp.Reflection.UnionCaseInfo[]" Usage="Microsoft.FSharp.Reflection.Type.GetUnionCases (unionType, bindingFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.FSharp.Reflection.UnionCaseInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unionType" Type="System.Type" />
        <Parameter Name="bindingFlags" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Reflection.BindingFlags&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.FSharp.Core.OptionalArgument</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="unionType">The input union type.</param>
        <param name="bindingFlags">Optional binding flags.</param>
        <summary>Gets the cases of a union type.</summary>
        <returns>An array of descriptions of the cases of the given union type.</returns>
        <remarks>Assumes the given type is a union type. If not, ArgumentException is raised during pre-computation.</remarks>
        <exception cref="System.ArgumentException">Thrown when the input type is not a union type.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsExceptionRepresentation">
      <MemberSignature Language="C#" Value="public static bool IsExceptionRepresentation (Type exceptionType, Microsoft.FSharp.Core.FSharpOption&lt;System.Reflection.BindingFlags&gt; bindingFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsExceptionRepresentation(class System.Type exceptionType, class Microsoft.FSharp.Core.FSharpOption`1&lt;valuetype System.Reflection.BindingFlags&gt; bindingFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Reflection.FSharpType.IsExceptionRepresentation(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsExceptionRepresentation (exceptionType As Type, bindingFlags As FSharpOption(Of BindingFlags)) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsExceptionRepresentation : Type * option&lt;System.Reflection.BindingFlags&gt; -&gt; bool" Usage="Microsoft.FSharp.Reflection.Type.IsExceptionRepresentation (exceptionType, bindingFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptionType" Type="System.Type" />
        <Parameter Name="bindingFlags" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Reflection.BindingFlags&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.FSharp.Core.OptionalArgument</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="exceptionType">The type to check.</param>
        <param name="bindingFlags">Optional binding flags.</param>
        <summary>Returns true if the <c>typ</c> is a representation of an F# exception declaration</summary>
        <returns>True if the type check is an F# exception.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFunction">
      <MemberSignature Language="C#" Value="public static bool IsFunction (Type typ);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsFunction(class System.Type typ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Reflection.FSharpType.IsFunction(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsFunction (typ As Type) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsFunction : Type -&gt; bool" Usage="Microsoft.FSharp.Reflection.Type.IsFunction typ" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typ" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typ">The type to check.</param>
        <summary>Return true if the <c>typ</c> is a representation of an F# function type or the runtime type of a closure implementing an F# function type</summary>
        <returns>True if the type check succeeds.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsModule">
      <MemberSignature Language="C#" Value="public static bool IsModule (Type typ);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsModule(class System.Type typ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Reflection.FSharpType.IsModule(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsModule (typ As Type) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsModule : Type -&gt; bool" Usage="Microsoft.FSharp.Reflection.Type.IsModule typ" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typ" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typ">The type to check.</param>
        <summary>Return true if the <c>typ</c> is a <c>System.Type</c> value corresponding to the compiled form of an F# module </summary>
        <returns>True if the type check succeeds.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRecord">
      <MemberSignature Language="C#" Value="public static bool IsRecord (Type typ, Microsoft.FSharp.Core.FSharpOption&lt;System.Reflection.BindingFlags&gt; bindingFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsRecord(class System.Type typ, class Microsoft.FSharp.Core.FSharpOption`1&lt;valuetype System.Reflection.BindingFlags&gt; bindingFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Reflection.FSharpType.IsRecord(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsRecord (typ As Type, bindingFlags As FSharpOption(Of BindingFlags)) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsRecord : Type * option&lt;System.Reflection.BindingFlags&gt; -&gt; bool" Usage="Microsoft.FSharp.Reflection.Type.IsRecord (typ, bindingFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typ" Type="System.Type" />
        <Parameter Name="bindingFlags" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Reflection.BindingFlags&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.FSharp.Core.OptionalArgument</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typ">The type to check.</param>
        <param name="bindingFlags">Optional binding flags.</param>
        <summary>Return true if the <c>typ</c> is a representation of an F# record type </summary>
        <returns>True if the type check succeeds.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTuple">
      <MemberSignature Language="C#" Value="public static bool IsTuple (Type typ);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsTuple(class System.Type typ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Reflection.FSharpType.IsTuple(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsTuple (typ As Type) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsTuple : Type -&gt; bool" Usage="Microsoft.FSharp.Reflection.Type.IsTuple typ" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typ" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typ">The type to check.</param>
        <summary>Return true if the <c>typ</c> is a representation of an F# tuple type </summary>
        <returns>True if the type check succeeds.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnion">
      <MemberSignature Language="C#" Value="public static bool IsUnion (Type typ, Microsoft.FSharp.Core.FSharpOption&lt;System.Reflection.BindingFlags&gt; bindingFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsUnion(class System.Type typ, class Microsoft.FSharp.Core.FSharpOption`1&lt;valuetype System.Reflection.BindingFlags&gt; bindingFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Reflection.FSharpType.IsUnion(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUnion (typ As Type, bindingFlags As FSharpOption(Of BindingFlags)) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsUnion : Type * option&lt;System.Reflection.BindingFlags&gt; -&gt; bool" Usage="Microsoft.FSharp.Reflection.Type.IsUnion (typ, bindingFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typ" Type="System.Type" />
        <Parameter Name="bindingFlags" Type="Microsoft.FSharp.Core.FSharpOption&lt;System.Reflection.BindingFlags&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.FSharp.Core.OptionalArgument</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typ">The type to check.</param>
        <param name="bindingFlags">Optional binding flags.</param>
        <summary>Returns true if the <c>typ</c> is a representation of an F# union type or the runtime type of a value of that type</summary>
        <returns>True if the type check succeeds.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeFunctionType">
      <MemberSignature Language="C#" Value="public static Type MakeFunctionType (Type domain, Type range);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Type MakeFunctionType(class System.Type domain, class System.Type range) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Reflection.FSharpType.MakeFunctionType(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeFunctionType (domain As Type, range As Type) As Type" />
      <MemberSignature Language="F#" Value="static member MakeFunctionType : Type * Type -&gt; Type" Usage="Microsoft.FSharp.Reflection.Type.MakeFunctionType (domain, range)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="System.Type" />
        <Parameter Name="range" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="domain">The input type of the function.</param>
        <param name="range">The output type of the function.</param>
        <summary>Returns a <c>System.Type</c> representing the F# function type with the given domain and range</summary>
        <returns>The function type with the given domain and range.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeStructTupleType">
      <MemberSignature Language="C#" Value="public static Type MakeStructTupleType (System.Reflection.Assembly asm, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Type MakeStructTupleType(class System.Reflection.Assembly asm, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Reflection.FSharpType.MakeStructTupleType(System.Reflection.Assembly,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeStructTupleType (asm As Assembly, types As Type()) As Type" />
      <MemberSignature Language="F#" Value="static member MakeStructTupleType : System.Reflection.Assembly * Type[] -&gt; Type" Usage="Microsoft.FSharp.Reflection.Type.MakeStructTupleType (asm, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asm" Type="System.Reflection.Assembly" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="asm">To be added.</param>
        <param name="types">An array of types for the tuple elements.</param>
        <summary>Returns a <c>System.Type</c> representing an F# struct tuple type with the given element types</summary>
        <returns>The type representing the struct tuple containing the input elements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeTupleType">
      <MemberSignature Language="C#" Value="public static Type MakeTupleType (Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Type MakeTupleType(class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Reflection.FSharpType.MakeTupleType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeTupleType (types As Type()) As Type" />
      <MemberSignature Language="F#" Value="static member MakeTupleType : Type[] -&gt; Type" Usage="Microsoft.FSharp.Reflection.Type.MakeTupleType types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="types">An array of types for the tuple elements.</param>
        <summary>Returns a <c>System.Type</c> representing an F# tuple type with the given element types</summary>
        <returns>The type representing the tuple containing the input elements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeTupleType">
      <MemberSignature Language="C#" Value="public static Type MakeTupleType (System.Reflection.Assembly asm, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Type MakeTupleType(class System.Reflection.Assembly asm, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.FSharp.Reflection.FSharpType.MakeTupleType(System.Reflection.Assembly,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeTupleType (asm As Assembly, types As Type()) As Type" />
      <MemberSignature Language="F#" Value="static member MakeTupleType : System.Reflection.Assembly * Type[] -&gt; Type" Usage="Microsoft.FSharp.Reflection.Type.MakeTupleType (asm, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asm" Type="System.Reflection.Assembly" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="asm">To be added.</param>
        <param name="types">An array of types for the tuple elements.</param>
        <summary>Returns a <c>System.Type</c> representing an F# tuple type with the given element types</summary>
        <returns>The type representing the tuple containing the input elements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>